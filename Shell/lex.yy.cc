#line 2 "lex.yy.cc"

#line 4 "lex.yy.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

#define YY_FLEX_LEX_COMPAT
extern int yylineno;
int yylineno = 1;

extern char yytext[];

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	if ( yyleng >= YYLMAX ) \
		YY_FATAL_ERROR( "token too large, exceeds YYLMAX" ); \
	yy_flex_strncpy( yytext, (yytext_ptr), yyleng + 1 ); \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 23
#define YY_END_OF_BUFFER 24
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[642] =
    {   0,
        0,    0,   24,   22,    2,    1,   22,   22,   10,   22,
        4,    3,   22,   22,    9,   11,   22,   22,    0,   22,
       22,    0,   20,   22,    0,   22,   22,    0,   22,   22,
       22,    0,    0,    8,    6,    5,   21,   21,   21,   21,
       21,   22,   11,   11,   11,   11,   11,   22,   20,   22,
       20,    0,   22,   22,   20,    0,    0,   21,   21,   20,
       21,   21,   21,    0,   22,    0,    0,   18,   22,   21,
       21,   21,   22,   22,   22,    0,   22,   22,   22,   22,
       17,    0,   21,   21,    7,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,

       22,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   20,    0,   21,   20,   21,   21,
       22,   20,    0,   22,   17,    0,   20,   21,   21,   21,
       20,   21,   21,   21,   21,   20,   21,   20,   21,   21,
       21,   20,   21,   21,   21,   20,   21,   21,   21,   21,
       18,   18,    0,   21,   21,   21,   18,   21,   21,   21,
       21,   21,   14,   12,    0,   17,   13,   22,   21,   21,
       21,   17,   15,   17,   22,   17,   17,   21,   21,   21,
       21,   21,   21,   17,   22,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   20,   21,
       20,   21,   21,   20,   21,   21,   20,    0,   17,   21,
       20,   21,   21,   17,   17,   17,   22,   17,   17,   21,
       20,   21,   21,   21,   20,   21,   21,   17,   21,   18,
       21,   21,   21,   18,   21,   21,   18,   18,   21,   21,
       21,   18,   21,   21,   17,    0,   17,   22,   21,   17,
       21,   21,   21,   17,   17,   21,   17,   17,   22,   17,
       21,   17,   17,   22,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   20,   21,   20,   21,   17,   17,
        0,   17,   20,   21,   17,   21,   20,   21,   21,   17,
       17,   17,   21,   17,   17,   22,   17,   17,   21,   17,
       17,   18,   21,   21,   17,   21,   17,    0,   21,   17,
       22,   21,   17,   21,   17,   17,   22,    0,   22,   17,
       19,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   20,   21,
       17,   17,   21,   17,    0,   17,   21,   17,   21,   17,

       17,   21,   17,   17,   22,   20,    0,   22,   17,   21,
       21,   17,    0,   17,   22,   21,   21,   21,   17,   21,
       21,   21,   17,   19,   19,   19,   19,   19,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   21,
       17,   21,   17,   20,    0,   17,   21,   20,   21,   21,
       17,   21,   20,   21,   21,   17,   21,   17,   21,   17,
       16,   21,   21,   21,   17,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   20,   21,   17,   20,   21,   17,   21,
       20,   21,   21,   17,   21,   17,   19,   19,   19,   19,
       19,   19,   19,   17,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   20,   21,   17,   19,   19,   19,   19,
       19,   19,   17,   19,   19,   19,   17,   17,   19,   17,
       17,   19,   19,   19,   19,   19,   19,   17,   11,   11,
       11,   19,   19,   17,   19,   17,   19,   17,   19,   19,
       19,   17,   17,   19,   17,   17,   19,   17,   19,   17,

       17,   19,   17,   19,   17,   19,   19,   17,   19,   17,
       19,   17,   17,   19,   19,   19,   17,   19,   19,   17,
       19,   17,   19,   19,   19,   17,   19,   19,   19,   17,
       19,   17,   19,   17,   19,   19,   19,   17,   19,   17,
        0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    1,    7,    1,    8,    1,    9,
       10,    1,    1,    1,    1,    1,   11,    1,    1,   12,
        1,    1,    1,    1,    1,    1,    1,    1,    1,   13,
        1,   14,   15,    1,    1,    1,    1,    1,   16,    1,
        1,   17,    1,    1,    1,   18,    1,    1,    1,    1,
        1,    1,   19,    1,    1,    1,    1,    1,    1,    1,
        1,   20,    1,    1,   21,    1,    1,    1,   22,    1,

       23,    1,    1,    1,    1,    1,    1,    1,    1,    1,
       24,    1,    1,   25,   26,    1,   27,    1,    1,    1,
        1,    1,   28,   29,   30,   31,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[32] =
    {   0,
        1,    2,    3,    4,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1
    } ;

static const flex_int16_t yy_base[901] =
    {   0,
        0,    0, 1083,   25, 7224, 7224,   53,   75,   27,   98,
       28,   29,  124,   26,   44,  147, 1063,  169,   45,  195,
      223, 1069, 1057,  251,  279,  298, 1032, 1039,  326,  352,
      377,   42,   49,   51,   56,   67,  401,    0,  423,   61,
      449,   58,  472,  494,   79,    0,  520,  542, 7224,  571,
     1026,   90,  599,  627,   71,  656,  683,  702,   40,  725,
      753,  781,  800,   73,  828, 1035,  105,    0,  856,  878,
     1024,  904,    0, 1004,  996,   78,  993, 1003,  930,  984,
      954,   93,   94,  113,  109,    0,  976,  114, 1002,    0,
      984,  988, 1028, 1050,  115,  132,    0,    0,  139,    0,

      105, 1073,  129,    0, 1099, 1121,  136,  155,  161, 1145,
     1167,  167, 1190, 1216,  987,  184, 1244,  975,  190, 1272,
     1300,    0, 1329, 1358, 1387, 1415,  143, 1444, 1471, 1490,
        0,  966, 1518, 1537,  167,    0,    0,  964,  212, 1565,
     1593,  150, 1622, 1649, 1668,    0,  960, 1696, 1715,  122,
      976,  191,  203, 1743,  218,  231, 1771, 1799,  180,  943,
      944, 1825, 1848, 1871,  230,  199,    0,  942, 1893,  121,
     1920, 1944,    0,    0, 1966,  219, 1992,  218,  226,  238,
     2014,  236, 2041, 2065, 2088,  201,  257, 2110,  229, 2132,
     2158, 2180,  252, 2203, 2230, 2254,  258,  256,  283,  303,

     2277,  929,  302, 2300, 2326,    0,  276,    0, 2352, 2374,
      297,  309,  331,    0,  928,  330,    0, 2401,  932,  341,
      931,  367, 2429,  921,  373, 2457,  271, 2485, 2514, 2533,
        0, 2562, 2591, 2620, 2648,    0, 2676, 2704, 2723, 2751,
      255, 2780, 2807, 2826,    0, 2855, 2884, 2913,  269,  360,
      384, 2941,  408, 2969, 2997,  322,  401,  415,  422,    0,
      444,    0, 3025,  329,  324,  348,  409, 3047,  419,  347,
        0,  328, 3074, 3098, 3121,  920,  382, 3147, 3169,    0,
      914,  413, 3196, 3219,  363,  430,  427,  454, 3241,  448,
     3263, 3289,  461,  473,  489, 3311,  486, 3334, 3361, 3385,

     3408, 3430,  506, 3453, 3479,  499,  462,  525,  531,    0,
      500,    0, 3505, 3529,  916,  537,  333, 3557, 3586,  420,
     3605, 3632,  425, 3651, 3680, 3699,    0, 3728, 3757, 3786,
     3814,    0, 3842, 3870, 3889, 3917,    0,    0, 3946, 3974,
     3993,  544,  556,  440,  468,  467,  561,  441,  484,  563,
     4015, 4038,    0, 4061,  469, 4087, 4109,  495, 4136, 4160,
     4188,  533,  576,  558,  578,  579,  582,  604,  610,  586,
      614,  616,    0,  631,    0,    0,    0,    0, 4210,  632,
        0, 4236, 4258,    0, 4281,  639,    0, 4307,  517, 4335,
     4364,  554, 4383, 4410, 4429,  602, 4458, 4485, 4504,    0,

        0,    0, 4533,    0, 4552, 4575, 4604, 4633, 4662,  574,
      617,  659,  634,  648, 4684, 4707,  645, 4734,    0,    0,
      647, 4761,    0, 4790,    0, 4818,  676, 4846,  661,  682,
      662,  677,  687,  707,  706,  709,  714,  736, 4868,    0,
        0,  742,    0,    0, 4891,  730,    0, 4918, 4942, 4970,
      693, 4999, 5026,  722, 5045, 5074, 5093,    0, 5122, 5151,
     5180, 5208,    0, 5237, 5266, 5295,  744,  751,  759,  758,
     5318,    0,  750,    0,    0, 5346,  726, 5374, 5402,  789,
      790, 5431,   98, 5459,  796, 5487,  766,  807,  804,  833,
      801,  835,  836, 5509,  841,    0, 5536,    0,    0,  843,

        0, 5563,    0,  775, 5592, 5621,  803, 5640, 5669,    0,
        0, 5688,    0,    0,  847,  842,  870, 5717,  876, 5745,
     5773,  879, 5802, 5831,  880,  885,  899, 5859,  902,  919,
     5887,  291,    0,  891, 5915, 5943,  900,  925,    0,  888,
      933,    0,  911,  943,  868,  935,  965,  959,    0,  961,
        0,    0,    0,  895, 5972, 6001,  973,  978,    0,  997,
        0,  998, 1017, 6020, 1009, 6049, 6078, 6106, 6134, 1023,
     6162, 1031, 1045, 1048,    0, 1036, 6190, 6219,  967, 1042,
     1071, 1065, 1086, 1094, 1072, 1113, 1107, 1119,    0, 1134,
        0,    0,    0,  886, 1140, 6247, 6275,    0,  869, 1141,

     6304, 1153, 1164, 1165, 1187, 1186, 1198, 1231, 6332,    0,
      866, 1235,    0, 6361, 1211, 6390,    0, 1245, 1259, 1252,
     1264, 1289, 6419, 1295, 6448,    0,    0, 1296, 6477,    0,
     1308, 1317, 1337, 1338,    0, 1349,    0,    0, 1350, 1361,
     7224,  867, 6507,  858,  849, 6511,  844, 6515, 6519, 6523,
     6527,  833, 6531, 6535,  827, 6539,  825,  824,  821,  818,
     6543,  798,  789, 6547, 6551, 6555, 6559, 6563, 6567, 6571,
     6575, 6579, 6583, 6587, 6591, 6595, 6599,  783, 6603,  775,
     6607,  774, 6611,  771,  768, 6615,  767, 6619,  750,  743,
      734, 6623,  723, 6627, 6631, 6635, 6639, 6643, 6647, 6651,

     6655, 6659, 6663, 6667, 6671, 6675, 6679, 6683, 6687, 6691,
     6695, 6699, 6703, 6707, 6711,  722, 6715,  718,  700,  698,
     6719,  694,  691, 6723, 6727,  673,  670, 6731,  669,  652,
     6735,  648,  647, 6739,  631,  625, 6743,  619, 6747,  594,
     6751, 6755, 6759, 6763,  591, 6767, 6771, 6775, 6779, 6783,
     6787, 6791, 6795, 6799,  562, 6803, 6807, 6811, 6815, 6819,
     6823, 6827, 6831,  558,  551, 6835,  520,  517, 6839,  498,
     6843,  497,  493,  466, 6847,  465, 6851,  421, 6855,  400,
      399,  398, 6859,  394,  377,  356, 6863,  351, 6867,  320,
     6871, 6875, 6879,  318, 6883, 6887, 6891, 6895, 6899, 6903,

     6907, 6911, 6915, 6919, 6923, 6927, 6931,  314,  297,  296,
      291, 6935,  273, 6939,  269, 6943, 6947, 6951,  246,  243,
      216, 6955,  190, 6959,  184, 6963, 6967, 6971, 6975, 6979,
     6983,  179, 6987,  178, 6991, 6995, 6999, 7003, 7007,  147,
     7011,  144,  123, 7015,  100, 7019,   96, 7023, 7027, 7031,
     7035, 7039, 7043,   79, 7047, 7051, 7055, 7059, 7063, 7067,
     7071, 7075, 7079,   78, 7083,   40, 7087, 7091, 7095, 7099,
     7103, 7107, 7111, 7115, 7119, 7123, 7127, 7131, 7135, 7139,
     7143, 7147, 7151, 7155, 7159, 7163, 7167, 7171, 7175, 7179,
     7183, 7187, 7191, 7195, 7199, 7203, 7207, 7211, 7215, 7219

    } ;

static const flex_int16_t yy_def[901] =
    {   0,
      641,    1,  641,  642,  641,  641,  643,  644,  645,  642,
      645,  645,  646,   10,  645,  647,   10,  644,  645,  646,
      643,  648,   10,  649,  650,  651,   18,  652,  653,  654,
      655,  652,  656,  645,  645,  645,  657,  658,  659,  660,
      661,   10,  647,  662,  663,   43,  664,  655,  641,  649,
       18,  665,  666,  667,  645,  665,  668,  669,  670,  657,
      671,  672,  673,  674,  653,  675,  676,   65,  677,  659,
      678,  679,   48,   48,   48,  680,   48,   48,  681,   48,
      682,  680,  678,  683,  645,   60,  659,  660,  661,  658,
       87,  678,  679,  684,  678,  683,   60,   87,  660,   89,

       10,  662,  685,  102,  686,  687,  685,  663,  688,  689,
      690,  691,  689,  692,  693,  694,  671,   87,  695,  696,
      697,   48,  698,  699,  700,  698,  660,  695,  701,  702,
       60,  117,  703,  704,  705,  658,  117,   87,  695,  696,
      706,  660,  695,  701,  702,   60,  117,  703,  704,  707,
      708,  709,  710,  711,  712,  713,  711,  714,  707,   87,
      678,  715,  716,  716,  717,  718,  164,   48,  719,  720,
      721,  722,  164,  164,  723,  718,  724,  720,  678,  725,
      719,  720,  721,  722,  726,  727,  728,  729,  730,  729,
      731,  732,  733,  732,  734,  735,  733,  730,  736,  737,

      738,  190,  736,  738,  739,  190,  730,  190,  731,  740,
      730,  736,  737,  204,  190,  736,  204,  739,  678,  741,
      678,  741,  742,   87,  743,  744,  745,  746,  747,  748,
      181,  749,  750,  751,  752,  164,  753,  747,  754,  749,
      755,  743,  756,  748,  181,  749,  750,  751,  757,  758,
      759,  760,  758,  760,  761,  762,  762,  758,  759,  254,
      758,  254,  761,  763,  764,  765,  766,  767,  763,  764,
      181,  768,  769,  770,  770,   87,  764,  771,  772,  275,
       87,  764,  771,  773,  774,  775,  774,  775,  776,  774,
      776,  777,  778,  779,  780,  781,  782,  781,  783,  784,

      785,  786,  780,  785,  787,  782,  774,  788,  789,  298,
      782,  298,  783,  784,  790,  791,  768,  792,  793,  794,
      795,  796,  768,  792,  793,  797,  181,  798,  799,  800,
      800,  275,  801,  793,  802,  803,  331,  275,  801,  793,
      802,  804,  805,  806,  764,  790,  807,  808,  790,  807,
      809,  810,  275,  811,  764,  812,  813,  808,  814,  815,
      816,  774,  817,  782,  818,  819,  820,  821,  822,  782,
      818,  819,  298,  782,  298,  313,  314,  314,  823,  819,
      314,  824,  825,  314,  823,  819,  314,  824,  768,  792,
      793,  764,  826,  827,  828,  764,  826,  827,  829,  331,

      275,  339,  793,  341,  803,  813,  828,  830,  831,  832,
      790,  807,  833,  834,  809,  810,  832,  835,  275,  416,
      832,  835,  275,  816,  836,  837,  838,  839,  782,  818,
      819,  840,  819,  841,  842,  840,  819,  841,  843,  314,
      385,  819,  314,  388,  825,  842,  445,  844,  845,  846,
      764,  826,  827,  847,  848,  849,  850,  416,  846,  851,
      852,  850,  416,  846,  851,  852,  853,  764,  853,  764,
      854,  416,  832,  422,  275,  837,  855,  856,  857,  855,
      858,  859,  860,  861,  862,  863,  864,  840,  819,  841,
      842,  865,  866,  843,  864,  494,  867,  314,  494,  864,

      494,  867,  314,  832,  868,  869,  832,  868,  869,  462,
      416,  846,  465,  466,  853,  764,  870,  861,  871,  872,
      857,  873,  874,  875,  873,  871,  876,  859,  518,  862,
      863,  860,  518,  871,  872,  877,  871,  876,  528,  518,
      862,  531,  864,  878,  819,  864,  878,  819,  494,  864,
      494,  502,  314,  832,  868,  869,  879,  879,  518,  871,
      535,  880,  881,  877,  882,  883,  884,  875,  885,  881,
      886,  882,  871,  876,  564,  882,  883,  884,  864,  878,
      819,  879,  887,  888,  889,  890,  887,  888,  564,  882,
      577,  578,  578,  518,  888,  891,  892,  578,  518,  888,

      891,  887,  888,  871,  893,  894,  871,  893,  895,  578,
      518,  888,  601,  892,  894,  896,  568,  897,  871,  893,
      898,  881,  895,  897,  899,  578,  623,  897,  899,  578,
      900,  888,  900,  888,  623,  897,  629,  578,  900,  888,
        0,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,

      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,

      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641

    } ;

static const flex_int16_t yy_nxt[7256] =
    {   0,
        4,    5,    6,    5,    4,    7,    8,    9,    4,    4,
        4,   10,   11,   12,    4,    4,    4,    4,    4,   13,
        4,    4,    4,    4,    4,   14,    4,    4,   15,    4,
       16,   18,   19,   32,   32,   32,   35,   19,   19,   19,
      303,   22,   36,   22,   20,  136,   33,   33,   33,   42,
       32,   32,   38,   19,   22,   83,   22,   32,   23,   24,
       25,   64,   32,   33,   33,   25,   25,   95,   84,   82,
       33,   19,   26,   32,   85,   33,   38,   32,  495,  174,
       96,   25,   28,   29,  101,  107,   33,   28,   28,  108,
       33,   22,  150,   22,   30,  115,  358,  165,  109,  425,

      301,  425,   31,   28,   18,   19,   66,  166,   66,  116,
       19,   34,  165,  159,  152,   32,   38,   20,   19,  179,
       95,  178,  166,  494,  153,   38,   19,   38,   33,  185,
       39,   40,  180,   96,  159,   38,   40,   40,  179,  186,
      269,  249,  178,   41,  446,   95,  186,  207,  187,   95,
      270,  180,   40,   44,   45,  187,   95,   46,   96,   45,
       45,  107,   96,  197,   38,  108,   47,  198,   22,   96,
       22,  199,  136,  211,  109,   45,   28,  212,  176,  417,
      200,   28,   28,   38,  445,   22,  213,   59,   30,  219,
      206,   22,   66,   22,   66,  221,   48,   28,   38,  249,

      152,   39,   40,  220,   66,  266,  155,   40,   40,  222,
      153,  186,  250,   22,   41,   22,  303,  221,  267,   66,
      187,   66,  251,   40,   22,  266,   22,  257,   23,   24,
       25,  222,   66,   38,   66,   25,   25,  269,  267,  287,
      258,   38,   26,  103,  179,  159,  380,  270,  288,  264,
      259,   25,   22,  178,   22,  269,   51,  180,   52,  265,
       38,   95,  293,   52,   52,  270,  287,  285,  293,  174,
       53,  294,   38,  357,   96,  288,  286,  294,   54,   52,
       22,  295,   22,  306,   55,   56,  287,  295,  249,  211,
      165,   91,  425,  212,  425,  288,  416,   73,   57,   22,

      166,   59,  213,   60,   61,   62,   38,  287,  211,  307,
       62,   62,  212,  308,  358,  211,  288,   63,  176,  212,
       92,  213,  309,   66,  306,   66,   62,   66,  213,   66,
      346,  257,   38,   67,   38,   68,  211,  307,   67,   67,
      212,  308,   22,  347,   59,   69,  315,  269,  344,  213,
      309,  203,  269,  346,   67,   38,  102,  270,  345,   71,
      316,   66,  270,   66,   71,   71,  347,   64,   22,  258,
       59,   72,  315,  287,   22,  348,   22,  301,  221,  259,
       71,   74,  288,   75,   76,   66,  316,  155,  346,   76,
       76,   77,  222,  342,  378,   78,   79,   80,  311,  310,

      303,  347,   66,  343,   66,   76,   81,   87,   88,   66,
      257,   66,   38,   88,   88,  349,   66,  258,   66,  346,
       89,  193,   38,   66,  258,  155,  266,  259,  350,   88,
       92,  342,  347,   38,  259,   92,   92,  287,  344,  267,
      362,  343,   93,   38,  269,   66,  288,   66,  345,  363,
       94,   92,   38,  258,  270,   98,   99,   38,  287,  344,
      413,   99,   99,  259,  362,  206,  207,  288,  100,  345,
      414,  293,  287,  363,  346,  346,   38,   99,   44,   45,
      294,  288,   46,  364,   45,   45,  159,  347,  347,  306,
      295,   47,  365,   17,  410,  367,  370,  357,  275,  368,

       45,  103,  366,  159,  104,  371,  103,  103,  369,  370,
      370,  410,  367,  105,  413,  372,  368,  182,  371,  371,
       73,  106,  103,   38,  414,  369,  111,  112,  372,  372,
      113,  211,  112,  112,   38,  212,  269,  307,   22,  114,
       59,  308,  315,  287,  213,   66,  270,   66,  112,   76,
      309,   28,  288,  258,   76,   76,  316,   66,  277,  155,
      346,   79,   88,  259,   38,  342,   38,  411,  370,  411,
       76,   81,   22,  347,   22,  343,   51,  371,   52,   38,
      412,   38,  412,   52,   52,  432,  362,  372,  429,  433,
       53,   76,  186,  467,  310,  363,  370,  430,  434,   52,

       22,  187,   59,  468,  118,  371,  119,  431,  346,  435,
      367,  119,  119,   38,  368,  372,  436,   38,  120,  201,
      437,  347,  432,  369,  429,  203,  433,  119,   22,  438,
       22,  301,  122,  430,  123,  434,  159,   38,  432,  123,
      123,  370,  433,  431,  410,  432,  124,  193,  192,  433,
      371,  434,  207,  469,  266,  123,  125,   22,  434,   22,
      372,  115,   38,  470,  467,  411,  467,  267,  432,  206,
      103,  370,  433,   17,  468,  116,  468,  425,  412,  425,
      371,  434,  480,  126,   22,   38,   59,  287,  127,  128,
      372,   27,  429,  432,  275,  481,  288,  433,  182,  346,

      181,  430,  129,   22,  487,   22,  434,  131,  132,  133,
       38,  431,  347,  488,  133,  133,  491,  489,  176,  287,
      432,  134,  174,   28,  433,  492,  490,  425,  288,  425,
      133,   87,   88,  434,  203,  493,  487,   88,   88,   38,
      491,  413,  488,  206,   89,  517,  489,   38,  432,  492,
      201,  414,  433,   88,   22,  490,   22,  346,  138,  493,
      139,  434,   38,  515,  346,  139,  139,  192,  103,  467,
      347,  181,  140,  516,  174,   76,  543,  347,  515,  468,
      141,  139,   22,   92,   22,  544,  142,  143,  516,   45,
      425,  425,  425,  483,  467,  545,  526,  425,  102,  425,

      144,   22,  537,   59,  468,  146,  147,  148,  517,  527,
      432,  491,  148,  148,  433,  538,  525,  287,   88,  149,
      492,   91,  467,  434,   90,   86,  288,   73,  148,   66,
      493,   66,  468,   28,  487,   67,   38,   68,   38,  488,
       67,   67,  367,  489,   43,  546,  368,   69,  346,   19,
       38,  543,  490,  543,  547,  369,   67,   66,   27,  155,
      544,  347,  544,  156,  548,  157,  515,   17,  156,  156,
      545,  425,  545,  483,  432,  158,  516,  425,  433,  425,
      425,  425,  425,  425,  156,   92,  425,  434,  425,  557,
       92,   92,  425,  609,  425,  558,  609,   93,  562,  562,

      425,  425,  483,  425,  558,  573,   92,   38,  563,  563,
      558,  161,  572,  609,  467,  536,  161,  161,  574,  558,
      425,  543,  425,  162,  468,  537,  425,  572,  483,  536,
      544,  573,  161,   38,  425,  159,  425,  170,  538,  537,
      545,  352,  170,  170,  574,  543,   38,  352,   91,  171,
      159,  159,  538,  579,  544,  210,  210,  268,  170,  172,
      175,  176,  580,  159,  545,  432,  176,  176,   38,  433,
       91,  543,  581,  177,  425,  579,  483,  543,  434,  425,
      544,  483,  176,   92,  580,  151,  544,  141,   92,   92,
      545,   91,  582,  141,  581,   93,  545,  582,  425,  425,

      425,  483,   91,   94,   92,   38,   64,  159,   98,   99,
      425,   91,  425,  173,   99,   99,  558,  583,  425,  168,
      425,  100,  167,  585,  425,  164,  425,  584,  587,  585,
       99,   38,  425,  163,  425,  161,  586,  425,  588,  425,
      161,  161,  586,  159,  151,   38,  425,  162,  425,  425,
      587,  483,  579,   27,  573,  587,  161,  182,   64,   27,
      588,  580,  182,  182,  558,  588,  425,  574,  483,  183,
       19,  581,  572,  425,   49,  425,   19,  432,  182,  184,
      103,  433,  641,  104,  582,  103,  103,  425,  641,  483,
      434,  517,  105,  641,  641,  425,  641,  425,  641,  606,

      604,  103,   38,  641,  641,  602,  189,  641,  425,  190,
      483,  189,  189,  605,  425,  603,  483,  641,  191,  607,
      425,  641,  425,  641,  641,  604,  602,  189,  193,  641,
      641,  194,  608,  193,  193,  425,  603,  425,  605,  641,
      195,  425,  425,  425,  425,  641,  604,  604,  641,  193,
      196,  202,  203,  587,  425,  204,  483,  203,  203,  605,
      605,  641,  641,  588,  205,  425,  425,  425,  425,  641,
      604,  641,  602,  203,  207,  641,  641,  208,  641,  207,
      207,  641,  603,  605,  558,  641,  209,  425,  425,  425,
      483,  641,  618,  619,  210,  207,  202,  203,  641,  425,

      204,  425,  203,  203,  641,  621,  620,  641,  641,  205,
      641,  641,  425,  641,  425,  622,  641,  558,  203,   38,
      641,  641,  215,  216,  641,  618,  217,  641,  216,  216,
      621,  641,  425,  641,  483,  218,  425,  619,  425,  641,
      622,  604,  641,  641,  216,   22,  425,   22,  425,  138,
      620,  139,  641,  425,  605,  483,  139,  139,  619,  641,
      425,  641,  425,  140,  631,  425,  641,  483,  641,  641,
      641,  620,  139,   22,  632,   59,  641,  224,  558,  225,
      641,  641,  641,  633,  225,  225,  618,  641,  641,  641,
      425,  226,  425,  634,  641,  585,  425,  425,  425,  425,

      225,   22,  641,   22,  641,  122,  641,  123,  586,  425,
      641,  483,  123,  123,  631,  631,  641,  641,  425,  124,
      425,  641,  641,  604,  632,  632,  641,  639,  123,  125,
       22,  641,   22,  641,  227,  641,  605,  640,  425,  425,
      483,  425,  641,  641,  604,  641,  641,  641,  228,  641,
      425,  425,  425,  483,  641,  641,  639,  605,  229,   22,
      641,   59,  425,  231,  425,  232,  640,  604,  631,  639,
      232,  232,  641,  641,  641,  641,  641,  233,  632,  640,
      605,  641,  641,  641,  641,  641,  232,  234,   22,  641,
       22,  641,  236,  237,  238,  641,  641,  641,  641,  238,

      238,  641,  641,  641,  641,  641,  239,  641,  641,  641,
      641,  641,  641,  641,  641,  238,   22,  641,   22,  641,
      227,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  228,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  229,   22,  641,   22,  641,  221,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  222,  641,  641,  641,  641,  641,  641,
      641,  240,   22,  641,   59,  641,  241,  242,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      243,   22,  641,   22,  641,  131,  132,  133,  641,  641,

      641,  641,  133,  133,  641,  641,  641,  641,  641,  134,
      641,  641,  641,  641,  641,  641,  641,  641,  133,   22,
      641,   22,  641,  142,  143,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  144,   22,  641,
       59,  641,  146,  147,  148,  641,  641,  641,  641,  148,
      148,  641,  641,  641,  641,  641,  149,  641,  641,  641,
      641,  641,  641,  641,  641,  148,   22,  641,   59,  641,
      224,  641,  225,  641,  641,  641,  641,  225,  225,  641,
      641,  641,  641,  641,  226,  641,  641,  641,  641,  641,
      641,  641,  641,  225,   22,  641,   22,  641,  245,  641,

      246,  641,  641,  641,  641,  246,  246,  641,  641,  641,
      641,  641,  247,  641,  641,  641,  641,  641,  641,  641,
      641,  246,  248,   22,  641,   22,  641,  221,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  222,  641,  641,  641,  641,  641,  641,  641,  240,
       22,  641,   59,  641,  241,  242,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  243,   22,
      641,   22,  641,  131,  132,  133,  641,  641,  641,  641,
      133,  133,  641,  641,  641,  641,  641,  134,  641,  641,
      641,  641,  641,  641,  641,  641,  133,   22,  641,   22,

      641,  142,  143,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  144,   22,  641,   59,  641,
      146,  147,  148,  641,  641,  641,  641,  148,  148,  641,
      641,  641,  641,  641,  149,  641,  641,  641,  641,  641,
      641,  641,  641,  148,   66,  641,   66,  641,  641,  641,
      253,  641,  254,  641,  641,  253,  253,  641,  641,  641,
      641,  641,  255,  641,  641,  641,  641,  641,  641,  641,
      641,  253,   66,  641,   66,  641,  641,  641,  253,  641,
      254,  641,  641,  253,  253,  641,  641,  641,  641,  641,
      255,  641,  641,  641,  641,  641,  641,  641,  641,  253,

       66,  641,  155,  641,  641,  641,  261,  641,  262,  641,
      641,  261,  261,  641,  641,  641,  641,  641,  263,  641,
      641,  641,  641,  641,  641,  641,  641,  261,   38,  641,
      641,  641,  161,  641,  641,  641,  641,  161,  161,  641,
      641,  641,  641,  641,  162,  641,  641,  641,  641,  641,
      641,  641,  641,  161,  175,  176,  641,  641,  641,  641,
      176,  176,  641,  641,  641,  641,  641,  177,  641,  641,
      641,  641,  641,  641,  641,  641,  176,  175,  176,  641,
      641,  641,  641,  176,  176,  641,  641,  641,  641,  641,
      177,  641,  641,  641,  641,  641,  641,  641,  641,  176,

      182,  641,  641,  641,  641,  182,  182,  641,  641,  641,
      641,  641,  183,  641,  641,  641,  641,  641,  641,  641,
      641,  182,  184,   38,  641,  641,  641,  272,  641,  641,
      641,  641,  272,  272,  641,  641,  641,  641,  641,  273,
      641,  641,  641,  641,  641,  641,  641,  641,  272,  274,
      276,  277,  641,  641,  641,  641,  277,  277,  641,  641,
      641,  641,  641,  278,  641,  641,  641,  641,  641,  641,
      641,  641,  277,   28,  641,  641,  641,  641,   28,   28,
      641,  641,  641,  641,  641,   30,  641,  641,  641,  641,
      641,  641,  641,  279,   28,   38,  641,  641,  281,  282,

      641,  641,  641,  641,  282,  282,  641,  641,  641,  641,
      641,  283,  641,  641,  641,  641,  641,  641,  641,  641,
      282,  182,  641,  641,  641,  641,  182,  182,  641,  641,
      641,  641,  641,  183,  641,  641,  641,  641,  641,  641,
      641,  641,  182,  184,   38,  641,  641,  641,  272,  641,
      641,  641,  641,  272,  272,  641,  641,  641,  641,  641,
      273,  641,  641,  641,  641,  641,  641,  641,  641,  272,
      274,  276,  277,  641,  641,  641,  641,  277,  277,  641,
      641,  641,  641,  641,  278,  641,  641,  641,  641,  641,
      641,  641,  641,  277,   18,   19,  641,  641,  641,  641,

       19,   19,  641,  641,  641,  641,  641,   20,  641,  284,
      641,  641,  641,  641,  641,  641,   19,  207,  641,  641,
      208,  641,  207,  207,  641,  641,  641,  641,  641,  209,
      641,  641,  641,  641,  641,  641,  641,  641,  207,  207,
      641,  641,  208,  641,  207,  207,  641,  641,  641,  641,
      641,  209,  641,  641,  641,  641,  641,  641,  641,  641,
      207,   38,  641,  641,  641,  290,  641,  641,  291,  641,
      290,  290,  641,  641,  641,  641,  641,  292,  641,  641,
      641,  641,  641,  641,  641,  641,  290,  193,  641,  641,
      194,  641,  193,  193,  641,  641,  641,  641,  641,  195,

      641,  641,  641,  641,  641,  641,  641,  641,  193,  196,
      193,  641,  641,  194,  641,  193,  193,  641,  641,  641,
      641,  641,  195,  641,  641,  641,  641,  641,  641,  641,
      641,  193,  196,   38,  641,  641,  641,  297,  641,  641,
      298,  641,  297,  297,  641,  641,  641,  641,  641,  299,
      641,  641,  641,  641,  641,  641,  641,  641,  297,  300,
      302,  303,  641,  641,  304,  641,  303,  303,  641,  641,
      641,  641,  641,  305,  641,  641,  641,  641,  641,  641,
      641,  641,  303,  202,  203,  641,  641,  204,  641,  203,
      203,  641,  641,  641,  641,  641,  205,  641,  641,  641,

      641,  641,  641,  641,  641,  203,  202,  203,  641,  641,
      204,  641,  203,  203,  641,  641,  641,  641,  641,  205,
      641,  641,  641,  641,  641,  641,  641,  641,  203,   38,
      641,  641,  215,  216,  641,  641,  217,  641,  216,  216,
      641,  641,  641,  641,  641,  218,  641,  641,  641,  641,
      641,  641,  641,  641,  216,   38,  641,  641,  641,  290,
      641,  641,  291,  641,  290,  290,  641,  641,  641,  641,
      641,  292,  641,  641,  641,  641,  641,  641,  641,  641,
      290,  311,  641,  641,  312,  641,  311,  311,  641,  641,
      641,  641,  641,  313,  641,  641,  641,  641,  641,  641,

      641,  641,  311,  314,   38,  641,  641,  215,  216,  641,
      641,  217,  641,  216,  216,  641,  641,  641,  641,  641,
      218,  641,  641,  641,  641,  641,  641,  641,  641,  216,
       22,  641,   22,  641,  138,  641,  139,  641,  641,  641,
      641,  139,  139,  641,  641,  641,  641,  641,  140,  641,
      641,  641,  641,  641,  641,  641,  641,  139,   22,  641,
       59,  641,  224,  641,  225,  641,  641,  641,  641,  225,
      225,  641,  641,  641,  641,  641,  226,  641,  641,  641,
      641,  641,  641,  641,  641,  225,   22,  641,   59,  641,
      317,  641,  641,  641,  641,  641,  641,  641,  641,  641,

      641,  641,  641,  641,  318,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  319,   22,  641,   22,  641,  320,
      321,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  322,   22,  641,   22,  641,  245,  641,
      246,  641,  641,  641,  641,  246,  246,  641,  641,  641,
      641,  641,  247,  641,  641,  641,  641,  641,  641,  641,
      641,  246,  248,   22,  641,   22,  641,  323,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  324,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  325,   22,  641,   59,  641,  327,  641,  328,  641,

      641,  641,  641,  328,  328,  641,  641,  641,  641,  641,
      329,  641,  641,  641,  641,  641,  641,  641,  641,  328,
      330,   22,  641,   22,  641,  332,  333,  334,  641,  641,
      641,  641,  334,  334,  641,  641,  641,  641,  641,  335,
      641,  641,  641,  641,  641,  641,  641,  641,  334,   22,
      641,   22,  641,  236,  237,  238,  641,  641,  641,  641,
      238,  238,  641,  641,  641,  641,  641,  239,  641,  641,
      641,  641,  641,  641,  641,  641,  238,   22,  641,   22,
      641,   51,  641,   52,  641,  641,  641,  641,   52,   52,
      641,  641,  641,  641,  641,   53,  641,  641,  641,  641,

      641,  641,  641,  336,   52,   22,  641,   22,  641,  320,
      321,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  322,   22,  641,   59,  641,  338,  339,
      340,  641,  641,  641,  641,  340,  340,  641,  641,  641,
      641,  641,  341,  641,  641,  641,  641,  641,  641,  641,
      641,  340,   22,  641,   22,  641,  323,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      324,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      325,   22,  641,   22,  641,  221,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  222,

      641,  641,  641,  641,  641,  641,  641,  240,   22,  641,
       59,  641,  241,  242,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  243,   22,  641,   22,
      641,  245,  641,  246,  641,  641,  641,  641,  246,  246,
      641,  641,  641,  641,  641,  247,  641,  641,  641,  641,
      641,  641,  641,  641,  246,  248,   22,  641,   22,  641,
      323,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  324,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  325,   22,  641,   59,  641,  327,
      641,  328,  641,  641,  641,  641,  328,  328,  641,  641,

      641,  641,  641,  329,  641,  641,  641,  641,  641,  641,
      641,  641,  328,  330,   22,  641,   22,  641,  332,  333,
      334,  641,  641,  641,  641,  334,  334,  641,  641,  641,
      641,  641,  335,  641,  641,  641,  641,  641,  641,  641,
      641,  334,   66,  641,   66,  641,  641,  641,  253,  641,
      254,  641,  641,  253,  253,  641,  641,  641,  641,  641,
      255,  641,  641,  641,  641,  641,  641,  641,  641,  253,
       66,  641,   66,  641,  641,  641,  253,  641,  254,  641,
      641,  253,  253,  641,  641,  641,  641,  641,  255,  641,
      641,  641,  641,  641,  641,  641,  641,  253,   66,  641,

      155,  641,  641,  641,  261,  641,  262,  641,  641,  261,
      261,  641,  641,  641,  641,  641,  263,  641,  641,  641,
      641,  641,  641,  641,  641,  261,   66,  641,  155,  641,
      641,  641,  261,  641,  262,  641,  641,  261,  261,  641,
      641,  641,  641,  641,  263,  641,  641,  641,  641,  641,
      641,  641,  641,  261,   76,  641,  641,  641,  641,   76,
       76,  641,  641,  641,  351,  641,   79,  641,  641,  641,
      641,  641,  641,  641,  641,   76,   81,   38,  641,  641,
      641,  272,  641,  641,  641,  641,  272,  272,  641,  641,
      641,  641,  641,  273,  641,  641,  641,  641,  641,  641,

      641,  641,  272,  274,  276,  277,  641,  641,  641,  641,
      277,  277,  641,  641,  641,  641,  641,  278,  641,  641,
      641,  641,  641,  641,  641,  641,  277,  276,  277,  641,
      641,  641,  641,  277,  277,  641,  641,  641,  641,  641,
      278,  641,  641,  641,  641,  641,  641,  641,  641,  277,
       38,  641,  641,  354,  355,  641,  641,  641,  641,  355,
      355,  641,  641,  641,  641,  641,  356,  641,  641,  641,
      641,  641,  641,  641,  641,  355,  358,  641,  641,  641,
      641,  358,  358,  641,  641,  641,  641,  641,  359,  641,
      641,  641,  641,  641,  641,  641,  641,  358,  360,   38,

      641,  641,  354,  355,  641,  641,  641,  641,  355,  355,
      641,  641,  641,  641,  641,  356,  641,  641,  641,  641,
      641,  641,  641,  641,  355,   18,   19,  641,  641,  641,
      641,   19,   19,  641,  641,  641,  641,  641,   20,  641,
      641,  361,  641,  641,  641,  641,  641,   19,  207,  641,
      641,  208,  641,  207,  207,  641,  641,  641,  641,  641,
      209,  641,  641,  641,  641,  641,  641,  641,  641,  207,
      207,  641,  641,  208,  641,  207,  207,  641,  641,  641,
      641,  641,  209,  641,  641,  641,  641,  641,  641,  641,
      641,  207,   38,  641,  641,  641,  290,  641,  641,  291,

      641,  290,  290,  641,  641,  641,  641,  641,  292,  641,
      641,  641,  641,  641,  641,  641,  641,  290,  311,  641,
      641,  312,  641,  311,  311,  641,  641,  641,  641,  641,
      313,  641,  641,  641,  641,  641,  641,  641,  641,  311,
      314,  311,  641,  641,  312,  641,  311,  311,  641,  641,
      641,  641,  641,  313,  641,  641,  641,  641,  641,  641,
      641,  641,  311,  314,   38,  641,  641,  641,  374,  641,
      641,  375,  641,  374,  374,  641,  641,  641,  641,  641,
      376,  641,  641,  641,  641,  641,  641,  641,  641,  374,
      377,  379,  380,  641,  641,  381,  641,  380,  380,  641,

      641,  641,  641,  641,  382,  641,  641,  641,  641,  641,
      641,  641,  641,  380,  302,  303,  641,  641,  304,  641,
      303,  303,  641,  641,  641,  641,  641,  305,  641,  641,
      641,  641,  641,  641,  641,  641,  303,  103,  641,  641,
      104,  641,  103,  103,  641,  641,  641,  641,  641,  105,
      641,  641,  641,  641,  641,  641,  641,  383,  103,  302,
      303,  641,  641,  304,  641,  303,  303,  641,  641,  641,
      641,  641,  305,  641,  641,  641,  641,  641,  641,  641,
      641,  303,   38,  641,  641,  385,  386,  641,  641,  387,
      641,  386,  386,  641,  641,  641,  641,  641,  388,  641,

      641,  641,  641,  641,  641,  641,  641,  386,   38,  641,
      641,  641,  374,  641,  641,  375,  641,  374,  374,  641,
      641,  641,  641,  641,  376,  641,  641,  641,  641,  641,
      641,  641,  641,  374,  377,  379,  380,  641,  641,  381,
      641,  380,  380,  641,  641,  641,  641,  641,  382,  641,
      641,  641,  641,  641,  641,  641,  641,  380,   22,  641,
       59,  641,  389,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  390,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  391,   22,  641,   22,
      641,  392,  393,  641,  641,  641,  641,  641,  641,  641,

      641,  641,  641,  641,  641,  394,   22,  641,   22,  641,
      115,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  116,  641,  641,  641,  641,  641,
      641,  641,  395,   22,  641,   59,  641,  396,  397,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  398,   22,  641,   59,  641,  389,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      390,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      391,   22,  641,   22,  641,  392,  393,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  394,

       22,  641,   22,  641,  245,  641,  246,  641,  641,  641,
      641,  246,  246,  641,  641,  641,  641,  641,  247,  641,
      641,  641,  641,  641,  641,  641,  641,  246,  248,   22,
      641,   22,  641,  323,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  324,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  325,   22,  641,
       59,  641,  327,  641,  328,  641,  641,  641,  641,  328,
      328,  641,  641,  641,  641,  641,  329,  641,  641,  641,
      641,  641,  641,  641,  641,  328,  330,   22,  641,   22,
      641,  332,  333,  334,  641,  641,  641,  641,  334,  334,

      641,  641,  641,  641,  641,  335,  641,  641,  641,  641,
      641,  641,  641,  641,  334,   22,  641,   22,  641,  332,
      333,  334,  641,  641,  641,  641,  334,  334,  641,  641,
      641,  641,  641,  335,  641,  641,  641,  641,  641,  641,
      641,  641,  334,   22,  641,   22,  641,  138,  641,  139,
      641,  641,  641,  641,  139,  139,  641,  641,  641,  641,
      641,  140,  641,  641,  641,  641,  641,  641,  641,  399,
      139,   22,  641,   22,  641,  392,  393,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  394,
       22,  641,   59,  641,  401,  402,  403,  641,  641,  641,

      641,  403,  403,  641,  641,  641,  641,  641,  404,  641,
      641,  641,  641,  641,  641,  641,  641,  403,   22,  641,
       22,  641,  406,  641,  407,  641,  641,  641,  641,  407,
      407,  641,  641,  641,  641,  641,  408,  641,  641,  641,
      641,  641,  641,  641,  641,  407,  409,   22,  641,   22,
      641,  138,  641,  139,  641,  641,  641,  641,  139,  139,
      641,  641,  641,  641,  641,  140,  641,  641,  641,  641,
      641,  641,  641,  399,  139,   22,  641,   22,  641,  392,
      393,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  394,   22,  641,   59,  641,  401,  402,

      403,  641,  641,  641,  641,  403,  403,  641,  641,  641,
      641,  641,  404,  641,  641,  641,  641,  641,  641,  641,
      641,  403,   76,  641,  641,  641,  641,   76,   76,  641,
      641,  641,  415,  641,   79,  641,  641,  641,  641,  641,
      641,  641,  641,   76,   81,  417,  641,  641,  641,  641,
      417,  417,  641,  641,  641,  641,  641,  418,  641,  641,
      641,  641,  641,  641,  641,  641,  417,  419,   92,  641,
      641,  641,  641,   92,   92,  641,  641,  641,  641,  641,
       93,  641,  641,  641,  641,  641,  641,  641,  352,   92,
       38,  641,  641,  354,  355,  641,  641,  641,  641,  355,

      355,  641,  641,  641,  641,  641,  356,  641,  641,  641,
      641,  641,  641,  641,  641,  355,  358,  641,  641,  641,
      641,  358,  358,  641,  641,  641,  641,  641,  359,  641,
      641,  641,  641,  641,  641,  641,  641,  358,  360,   38,
      641,  641,  641,  421,  641,  641,  641,  641,  421,  421,
      641,  641,  641,  641,  641,  422,  641,  641,  641,  641,
      641,  641,  641,  641,  421,  423,  175,  176,  641,  641,
      641,  641,  176,  176,  641,  641,  641,  641,  641,  177,
      641,  641,  641,  641,  641,  641,  641,  641,  176,  425,
      641,  425,  641,  641,  426,  427,  641,  641,  641,  641,

      427,  427,  641,  641,  641,  641,  641,  428,  641,  641,
      641,  641,  641,  641,  641,  641,  427,  207,  641,  641,
      208,  641,  207,  207,  641,  641,  641,  641,  641,  209,
      641,  641,  641,  641,  641,  641,  641,  439,  207,   38,
      641,  641,  441,  442,  641,  641,  443,  641,  442,  442,
      641,  641,  641,  641,  641,  444,  641,  641,  641,  641,
      641,  641,  641,  641,  442,  446,  641,  641,  447,  641,
      446,  446,  641,  641,  641,  641,  641,  448,  641,  641,
      641,  641,  641,  641,  641,  641,  446,  449,  207,  641,
      641,  208,  641,  207,  207,  641,  641,  641,  641,  641,

      209,  641,  641,  641,  641,  641,  641,  641,  439,  207,
       38,  641,  641,  441,  442,  641,  641,  443,  641,  442,
      442,  641,  641,  641,  641,  641,  444,  641,  641,  641,
      641,  641,  641,  641,  641,  442,   22,  641,   59,  641,
      389,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  390,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  391,   22,  641,   22,  641,  392,
      393,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  394,   22,  641,   22,  641,  221,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,

      641,  641,  222,  641,  641,  641,  641,  641,  641,  641,
      450,   22,  641,   59,  641,  451,  452,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  453,
       22,  641,   22,  641,  454,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  455,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  456,   22,
      641,   22,  641,  221,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  222,  641,  641,
      641,  641,  641,  641,  641,  450,   22,  641,   59,  641,
      451,  452,  641,  641,  641,  641,  641,  641,  641,  641,

      641,  641,  641,  641,  453,   22,  641,   22,  641,  458,
      641,  459,  641,  641,  641,  641,  459,  459,  641,  641,
      641,  641,  641,  460,  641,  641,  641,  641,  641,  641,
      641,  641,  459,  461,   22,  641,   22,  641,  392,  393,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  394,   22,  641,   22,  641,  406,  641,  407,
      641,  641,  641,  641,  407,  407,  641,  641,  641,  641,
      641,  408,  641,  641,  641,  641,  641,  641,  641,  641,
      407,  409,  358,  641,  641,  641,  641,  358,  358,  641,
      641,  641,  641,  641,  359,  641,  641,  641,  641,  641,

      641,  641,  641,  358,  360,   22,  641,   22,  641,  454,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  455,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  456,   22,  641,   59,  641,  463,  641,
      464,  641,  641,  641,  641,  464,  464,  641,  641,  641,
      641,  641,  465,  641,  641,  641,  641,  641,  641,  641,
      641,  464,  466,   22,  641,   22,  641,  236,  237,  238,
      641,  641,  641,  641,  238,  238,  641,  641,  641,  641,
      641,  239,  641,  641,  641,  641,  641,  641,  641,  641,
      238,   76,  641,  641,  641,  641,   76,   76,  641,  641,

      641,  641,  641,   79,  641,  641,  641,  641,  641,  641,
      641,  641,   76,  471,  417,  641,  641,  641,  641,  417,
      417,  641,  641,  641,  641,  641,  418,  641,  641,  641,
      641,  641,  641,  641,  641,  417,  419,   38,  641,  641,
      641,  473,  641,  641,  641,  641,  473,  473,  641,  641,
      641,  641,  641,  474,  641,  641,  641,  641,  641,  641,
      641,  641,  473,  475,   38,  641,  641,  641,  473,  641,
      641,  641,  641,  473,  473,  641,  641,  641,  641,  641,
      474,  641,  641,  641,  641,  641,  641,  641,  641,  473,
      475,  425,  641,  425,  641,  641,  426,  427,  641,  641,

      641,  641,  427,  427,  641,  641,  641,  641,  641,  428,
      641,  641,  641,  641,  641,  641,  641,  641,  427,  425,
      641,  425,  641,  641,  641,  477,  641,  641,  641,  641,
      477,  477,  641,  641,  641,  641,  641,  478,  641,  641,
      641,  641,  641,  641,  641,  479,  477,  425,  641,  483,
      641,  641,  484,  485,  641,  641,  641,  641,  485,  485,
      641,  641,  641,  641,  641,  486,  641,  641,  641,  641,
      641,  641,  641,  641,  485,  495,  641,  641,  496,  641,
      495,  495,  641,  641,  641,  641,  641,  497,  641,  641,
      641,  641,  641,  641,  641,  641,  495,  498,  446,  641,

      641,  447,  641,  446,  446,  641,  641,  641,  641,  641,
      448,  641,  641,  641,  641,  641,  641,  641,  641,  446,
      449,   38,  641,  641,  641,  500,  641,  641,  501,  641,
      500,  500,  641,  641,  641,  641,  641,  502,  641,  641,
      641,  641,  641,  641,  641,  641,  500,  503,  302,  303,
      641,  641,  304,  641,  303,  303,  641,  641,  641,  641,
      641,  305,  641,  641,  641,  641,  641,  641,  641,  641,
      303,   22,  641,   22,  641,  504,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  505,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  506,

       22,  641,   22,  641,  221,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  222,  641,
      641,  641,  641,  641,  641,  641,  450,   22,  641,   59,
      641,  451,  452,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  453,   22,  641,   59,  641,
      507,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  508,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  509,   22,  641,   22,  641,  320,
      321,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  322,   22,  641,   22,  641,  458,  641,

      459,  641,  641,  641,  641,  459,  459,  641,  641,  641,
      641,  641,  460,  641,  641,  641,  641,  641,  641,  641,
      641,  459,  461,   22,  641,   22,  641,  504,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  505,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  506,   22,  641,   59,  641,  511,  641,  512,  641,
      641,  641,  641,  512,  512,  641,  641,  641,  641,  641,
      513,  641,  641,  641,  641,  641,  641,  641,  641,  512,
      514,   22,  641,   22,  641,  332,  333,  334,  641,  641,
      641,  641,  334,  334,  641,  641,  641,  641,  641,  335,

      641,  641,  641,  641,  641,  641,  641,  641,  334,   22,
      641,   22,  641,  458,  641,  459,  641,  641,  641,  641,
      459,  459,  641,  641,  641,  641,  641,  460,  641,  641,
      641,  641,  641,  641,  641,  641,  459,  461,   22,  641,
       22,  641,  504,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  505,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  506,   22,  641,   59,
      641,  511,  641,  512,  641,  641,  641,  641,  512,  512,
      641,  641,  641,  641,  641,  513,  641,  641,  641,  641,
      641,  641,  641,  641,  512,  514,   22,  641,   22,  641,

      332,  333,  334,  641,  641,  641,  641,  334,  334,  641,
      641,  641,  641,  641,  335,  641,  641,  641,  641,  641,
      641,  641,  641,  334,  175,  176,  641,  641,  641,  641,
      176,  176,  641,  641,  641,  641,  641,  177,  641,  641,
      641,  641,  641,  641,  641,  641,  176,  425,  641,  425,
      641,  641,  641,  477,  641,  641,  641,  641,  477,  477,
      641,  641,  641,  641,  641,  478,  641,  641,  641,  641,
      641,  641,  641,  641,  477,  425,  641,  483,  641,  641,
      641,  519,  641,  641,  641,  641,  519,  519,  641,  641,
      641,  641,  641,  520,  641,  641,  641,  641,  641,  641,

      641,  641,  519,  425,  641,  425,  641,  641,  641,  522,
      641,  641,  641,  641,  522,  522,  641,  641,  641,  641,
      641,  523,  641,  641,  641,  641,  641,  641,  641,  641,
      522,  524,  425,  641,  425,  641,  641,  529,  530,  641,
      641,  641,  641,  530,  530,  641,  641,  641,  641,  641,
      531,  641,  641,  641,  641,  641,  641,  641,  641,  530,
      425,  641,  425,  641,  641,  641,  534,  641,  641,  641,
      641,  534,  534,  641,  641,  641,  641,  641,  535,  641,
      641,  641,  641,  641,  641,  641,  536,  534,  425,  641,
      483,  641,  641,  540,  541,  641,  641,  641,  641,  541,

      541,  641,  641,  641,  641,  641,  542,  641,  641,  641,
      641,  641,  641,  641,  641,  541,  495,  641,  641,  496,
      641,  495,  495,  641,  641,  641,  641,  641,  497,  641,
      641,  641,  641,  641,  641,  641,  641,  495,  498,   38,
      641,  641,  641,  550,  641,  641,  551,  641,  550,  550,
      641,  641,  641,  641,  641,  552,  641,  641,  641,  641,
      641,  641,  641,  641,  550,  553,   38,  641,  641,  641,
      550,  641,  641,  551,  641,  550,  550,  641,  641,  641,
      641,  641,  552,  641,  641,  641,  641,  641,  641,  641,
      641,  550,  553,   22,  641,   59,  641,  554,  641,  641,

      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  555,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  556,   22,  641,   22,  641,  392,  393,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      394,   22,  641,   59,  641,  554,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  555,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  556,
       22,  641,   22,  641,  392,  393,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  394,   22,
      641,   22,  641,  504,  641,  641,  641,  641,  641,  641,

      641,  641,  641,  641,  641,  641,  641,  505,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  506,  425,  641,
      425,  641,  641,  641,  534,  641,  641,  641,  641,  534,
      534,  641,  641,  641,  641,  641,  535,  641,  641,  641,
      641,  641,  641,  641,  641,  534,  425,  641,  483,  641,
      641,  641,  560,  641,  641,  641,  641,  560,  560,  641,
      641,  641,  641,  641,  561,  641,  641,  641,  641,  641,
      641,  641,  641,  560,  425,  641,  425,  641,  641,  641,
      522,  641,  641,  641,  641,  522,  522,  641,  641,  641,
      641,  641,  523,  641,  641,  641,  641,  641,  641,  641,

      641,  522,  524,  425,  641,  483,  641,  641,  641,  565,
      641,  641,  641,  641,  565,  565,  641,  641,  641,  641,
      641,  566,  641,  641,  641,  641,  641,  641,  641,  641,
      565,  567,  425,  641,  425,  641,  641,  569,  570,  641,
      641,  641,  641,  570,  570,  641,  641,  641,  641,  641,
      571,  641,  641,  641,  641,  641,  641,  641,  641,  570,
      425,  641,  425,  641,  641,  529,  530,  641,  641,  641,
      641,  530,  530,  641,  641,  641,  641,  641,  531,  641,
      641,  641,  641,  641,  641,  641,  641,  530,  425,  641,
      483,  641,  641,  540,  541,  641,  641,  641,  641,  541,

      541,  641,  641,  641,  641,  641,  542,  641,  641,  641,
      641,  641,  641,  641,  641,  541,  425,  641,  483,  641,
      641,  641,  560,  641,  641,  641,  641,  560,  560,  641,
      641,  641,  641,  641,  561,  641,  641,  641,  641,  641,
      641,  641,  641,  560,  425,  641,  425,  641,  641,  641,
      576,  641,  641,  641,  641,  576,  576,  641,  641,  641,
      641,  641,  577,  641,  641,  641,  641,  641,  641,  641,
      641,  576,  578,   22,  641,   59,  641,  554,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  555,  641,  641,  641,  641,  641,  641,  641,  641,

      641,  556,   22,  641,   22,  641,  392,  393,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      394,  425,  641,  425,  641,  641,  641,  576,  641,  641,
      641,  641,  576,  576,  641,  641,  641,  641,  641,  577,
      641,  641,  641,  641,  641,  641,  641,  641,  576,  578,
      425,  641,  483,  641,  641,  641,  590,  641,  641,  641,
      641,  590,  590,  641,  641,  641,  641,  641,  591,  641,
      641,  641,  641,  641,  641,  641,  641,  590,  592,  425,
      641,  425,  641,  641,  594,  595,  641,  641,  641,  641,
      595,  595,  641,  641,  641,  641,  641,  596,  641,  641,

      641,  641,  641,  641,  641,  641,  595,  425,  641,  425,
      641,  641,  569,  570,  641,  641,  641,  641,  570,  570,
      641,  641,  641,  641,  641,  571,  641,  641,  641,  641,
      641,  641,  641,  641,  570,  425,  641,  425,  641,  641,
      641,  477,  641,  641,  641,  641,  477,  477,  641,  641,
      641,  641,  641,  478,  641,  641,  641,  641,  641,  641,
      641,  597,  477,  425,  641,  483,  641,  641,  599,  600,
      641,  641,  641,  641,  600,  600,  641,  641,  641,  641,
      641,  601,  641,  641,  641,  641,  641,  641,  641,  641,
      600,  425,  641,  483,  641,  641,  641,  590,  641,  641,

      641,  641,  590,  590,  641,  641,  641,  641,  641,  591,
      641,  641,  641,  641,  641,  641,  641,  641,  590,  592,
      425,  641,  425,  641,  641,  594,  595,  641,  641,  641,
      641,  595,  595,  641,  641,  641,  641,  641,  596,  641,
      641,  641,  641,  641,  641,  641,  641,  595,  425,  641,
      483,  641,  641,  611,  612,  641,  641,  641,  641,  612,
      612,  641,  641,  641,  641,  641,  613,  641,  641,  641,
      641,  641,  641,  641,  641,  612,  425,  641,  425,  641,
      641,  641,  615,  641,  641,  641,  641,  615,  615,  641,
      641,  641,  641,  641,  616,  641,  641,  641,  641,  641,

      641,  641,  641,  615,  617,  425,  641,  483,  641,  641,
      611,  612,  641,  641,  641,  641,  612,  612,  641,  641,
      641,  641,  641,  613,  641,  641,  641,  641,  641,  641,
      641,  641,  612,  425,  641,  425,  641,  641,  641,  624,
      641,  641,  641,  641,  624,  624,  641,  641,  641,  641,
      641,  625,  641,  641,  641,  641,  641,  641,  641,  641,
      624,  626,  425,  641,  425,  641,  641,  641,  615,  641,
      641,  641,  641,  615,  615,  641,  641,  641,  641,  641,
      616,  641,  641,  641,  641,  641,  641,  641,  641,  615,
      617,  425,  641,  483,  641,  641,  641,  628,  641,  641,

      641,  641,  628,  628,  641,  641,  641,  641,  641,  629,
      641,  641,  641,  641,  641,  641,  641,  641,  628,  630,
      425,  641,  425,  641,  641,  641,  624,  641,  641,  641,
      641,  624,  624,  641,  641,  641,  641,  641,  625,  641,
      641,  641,  641,  641,  641,  641,  641,  624,  626,  425,
      641,  483,  641,  641,  641,  636,  641,  641,  641,  641,
      636,  636,  641,  641,  641,  641,  641,  637,  641,  641,
      641,  641,  641,  641,  641,  641,  636,  638,  425,  641,
      483,  641,  641,  641,  636,  641,  641,  641,  641,  636,
      636,  641,  641,  641,  641,  641,  637,  641,  641,  641,

      641,  641,  641,  641,  641,  636,  638,   21,   21,  641,
       21,   37,  641,  641,   37,   22,   22,  641,   22,   50,
       50,  641,   50,   25,   25,  641,   25,   58,   58,  641,
       58,   65,   65,  641,   65,   70,  641,  641,   70,   40,
      641,  641,   40,   97,  641,  641,   97,  110,  641,  641,
      110,   52,   52,  641,   52,  117,  117,  641,  117,  121,
      121,  641,  121,   62,   62,  641,   62,  130,  130,  641,
      130,  135,  135,  641,  135,  137,  137,  641,  137,  133,
      133,  641,  133,  145,  145,  641,  145,   71,  641,  641,
       71,   66,   66,  641,   66,   67,   67,  641,   67,  154,

      154,  641,  154,  160,  641,  641,  160,  169,  641,  641,
      169,   99,  641,  641,   99,  188,  641,  641,  188,  112,
      641,  641,  112,  214,  641,  641,  214,  119,  119,  641,
      119,  139,  139,  641,  139,  223,  223,  641,  223,  121,
      121,  641,  121,  123,  123,  641,  123,  230,  230,  641,
      230,  235,  235,  641,  235,  148,  148,  641,  148,  130,
      130,  641,  130,  133,  133,  641,  133,  145,  145,  641,
      145,  135,  135,  641,  135,  244,  244,  641,  244,  161,
      641,  641,  161,   66,   66,  641,   66,   67,   67,  641,
       67,  156,  156,  641,  156,  252,  252,  641,  252,  256,

      256,  641,  256,  253,  253,  641,  253,  260,  260,  641,
      260,  160,  641,  641,  160,  170,  641,  641,  170,  271,
      641,  641,  271,  280,  641,  641,  280,   99,  641,  641,
       99,  189,  641,  641,  189,  289,  641,  641,  289,  296,
      641,  641,  296,  216,  641,  641,  216,  214,  641,  641,
      214,  225,  225,  641,  225,  137,  137,  641,  137,  139,
      139,  641,  139,  223,  223,  641,  223,  232,  232,  641,
      232,  238,  238,  641,  238,  244,  244,  641,  244,  246,
      246,  641,  246,  326,  326,  641,  326,  331,  331,  641,
      331,  235,  235,  641,  235,   50,   50,  641,   50,  337,

      337,  641,  337,  148,  148,  641,  148,  161,  641,  641,
      161,  253,  253,  641,  253,  261,  261,  641,  261,  252,
      252,  641,  252,  260,  260,  641,  260,  256,  256,  641,
      256,  272,  641,  641,  272,  282,  641,  641,  282,  271,
      641,  641,  271,  353,  641,  641,  353,  290,  641,  641,
      290,  289,  641,  641,  289,  297,  641,  641,  297,  373,
      641,  641,  373,  384,  641,  641,  384,  216,  641,  641,
      216,  225,  225,  641,  225,  328,  328,  641,  328,  334,
      334,  641,  334,   52,   52,  641,   52,  340,  340,  641,
      340,  244,  244,  641,  244,  246,  246,  641,  246,  326,

      326,  641,  326,  331,  331,  641,  331,  137,  137,  641,
      137,  400,  400,  641,  400,  405,  405,  641,  405,  253,
      253,  641,  253,  261,  261,  641,  261,  272,  641,  641,
      272,  355,  641,  641,  355,  353,  641,  641,  353,  420,
      641,  641,  420,  424,  424,  641,  424,  290,  641,  641,
      290,  374,  641,  641,  374,  386,  641,  641,  386,  440,
      641,  641,  440,  139,  139,  641,  139,  403,  403,  641,
      403,  407,  407,  641,  407,  457,  457,  641,  457,  462,
      462,  641,  462,  235,  235,  641,  235,  421,  641,  641,
      421,  472,  641,  641,  472,  425,  425,  641,  425,  476,

      476,  641,  476,  427,  427,  641,  427,  482,  482,  641,
      482,  442,  641,  641,  442,  499,  641,  641,  499,  459,
      459,  641,  459,  464,  464,  641,  464,  238,  238,  641,
      238,  457,  457,  641,  457,  510,  510,  641,  510,  331,
      331,  641,  331,  473,  641,  641,  473,  477,  477,  641,
      477,  518,  518,  641,  518,  521,  521,  641,  521,  485,
      485,  641,  485,  528,  528,  641,  528,  532,  532,  641,
      532,  533,  533,  641,  533,  530,  530,  641,  530,  539,
      539,  641,  539,  500,  641,  641,  500,  549,  641,  641,
      549,  512,  512,  641,  512,  334,  334,  641,  334,  519,

      519,  641,  519,  534,  534,  641,  534,  559,  559,  641,
      559,  522,  522,  641,  522,  564,  564,  641,  564,  568,
      568,  641,  568,  541,  541,  641,  541,  575,  575,  641,
      575,  550,  641,  641,  550,  560,  560,  641,  560,  565,
      565,  641,  565,  570,  570,  641,  570,  576,  576,  641,
      576,  589,  589,  641,  589,  593,  593,  641,  593,  476,
      476,  641,  476,  598,  598,  641,  598,  590,  590,  641,
      590,  595,  595,  641,  595,  477,  477,  641,  477,  600,
      600,  641,  600,  610,  610,  641,  610,  614,  614,  641,
      614,  612,  612,  641,  612,  615,  615,  641,  615,  623,

      623,  641,  623,  627,  627,  641,  627,  624,  624,  641,
      624,  628,  628,  641,  628,  635,  635,  641,  635,  636,
      636,  641,  636,    3,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  641
    } ;

static const flex_int16_t yy_chk[7256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    4,    9,   11,   12,   12,    4,    4,   14,
      866,   59,   12,   59,    4,   59,    9,   11,   12,   14,
       15,   19,   33,    4,    7,   33,    7,   34,    7,    7,
        7,   32,   35,   15,   19,    7,    7,   40,   33,   32,
       34,   42,    7,   36,   36,   35,   64,   55,  864,  854,
       40,    7,    8,    8,   42,   45,   36,    8,    8,   45,
       55,   52,   64,   52,    8,   52,  847,   76,   45,  483,

      845,  483,    8,    8,   10,   10,   67,   76,   67,   52,
       10,   10,   82,   83,   67,   85,   84,   10,  101,   84,
       88,   83,   82,  843,   67,  150,   10,   13,   85,  101,
       13,   13,   84,   88,   95,   96,   13,   13,   96,  103,
      170,  150,   95,   13,  842,   99,  107,  840,  103,  127,
      170,   96,   13,   16,   16,  107,  142,   16,   99,   16,
       16,  108,  127,  107,  109,  108,   16,  109,  135,  142,
      135,  109,  135,  112,  108,   16,   18,  112,  834,  832,
      109,   18,   18,  159,  825,  116,  112,  116,   18,  116,
      823,  119,  152,  119,  152,  119,   18,   18,   20,  159,

      152,   20,   20,  116,  153,  166,  153,   20,   20,  119,
      152,  186,  153,  139,   20,  139,  821,  139,  166,  155,
      186,  155,  153,   20,   21,  176,   21,  155,   21,   21,
       21,  139,  156,  165,  156,   21,   21,  178,  176,  189,
      156,  180,   21,  820,  180,  179,  819,  178,  189,  165,
      156,   21,   24,  179,   24,  182,   24,  180,   24,  165,
      187,  241,  193,   24,   24,  182,  198,  187,  197,  815,
       24,  193,  249,  813,  241,  198,  187,  197,   24,   24,
       25,  193,   25,  198,   25,   25,  207,  197,  249,  199,
      227,  811,  532,  199,  532,  207,  810,  809,   25,   26,

      227,   26,  199,   26,   26,   26,  200,  211,  203,  200,
       26,   26,  203,  200,  808,  212,  211,   26,  794,  212,
      790,  203,  200,  256,  211,  256,   26,   29,  212,   29,
      265,  256,  264,   29,  213,   29,  216,  213,   29,   29,
      216,  213,  220,  265,  220,   29,  220,  272,  264,  216,
      213,  788,  317,  270,   29,   30,  786,  272,  264,   30,
      220,  250,  317,  250,   30,   30,  270,  266,  222,  250,
      222,   30,  222,  285,  225,  266,  225,  785,  225,  250,
       30,   31,  285,   31,   31,  251,  222,  251,  277,   31,
       31,   31,  225,  251,  784,   31,   31,   31,  782,  781,

      780,  277,  257,  251,  257,   31,   31,   37,   37,  253,
      257,  253,  267,   37,   37,  267,  258,  253,  258,  282,
       37,  778,  269,  259,  258,  259,  320,  253,  267,   37,
       39,  259,  282,  286,  258,   39,   39,  287,  269,  320,
      286,  259,   39,  344,  323,  261,  287,  261,  269,  286,
       39,   39,   41,  261,  323,   41,   41,  288,  290,  344,
      348,   41,   41,  261,  288,  776,  774,  290,   41,  344,
      348,  293,  307,  288,  345,  355,  294,   41,   43,   43,
      293,  307,   43,  294,   43,   43,  346,  345,  355,  307,
      293,   43,  294,  773,  346,  295,  297,  772,  770,  295,

       43,   44,  294,  349,   44,  297,   44,   44,  295,  306,
      311,  349,  303,   44,  358,  297,  303,  768,  306,  311,
      767,   44,   44,   47,  358,  303,   47,   47,  306,  311,
       47,  308,   47,   47,  309,  308,  389,  309,  316,   47,
      316,  309,  316,  362,  308,  342,  389,  342,   47,   48,
      309,  765,  362,  342,   48,   48,  316,  343,  764,  343,
      392,   48,  755,  342,  347,  343,  350,  347,  364,  350,
       48,   48,   50,  392,   50,  343,   50,  364,   50,  363,
      347,  365,  350,   50,   50,  366,  363,  364,  365,  366,
       50,  745,  367,  410,  740,  363,  370,  365,  366,   50,

       53,  367,   53,  410,   53,  370,   53,  365,  396,  367,
      368,   53,   53,  369,  368,  370,  369,  371,   53,  738,
      369,  396,  372,  368,  371,  736,  372,   53,   54,  369,
       54,  735,   54,  371,   54,  372,  411,  413,  380,   54,
       54,  374,  380,  371,  411,  386,   54,  733,  732,  386,
      374,  380,  730,  413,  414,   54,   54,   56,  386,   56,
      374,   56,  412,  413,  417,  412,  421,  414,  431,  729,
      727,  429,  431,  726,  417,   56,  421,  427,  412,  427,
      429,  431,  427,   56,   57,  430,   57,  432,   57,   57,
      429,  723,  430,  433,  722,  427,  432,  433,  720,  451,

      719,  430,   57,   58,  432,   58,  433,   58,   58,   58,
      434,  430,  451,  434,   58,   58,  435,  434,  718,  436,
      437,   58,  716,  693,  437,  435,  434,  477,  436,  477,
       58,   60,   60,  437,  691,  435,  436,   60,   60,  438,
      446,  454,  438,  690,   60,  477,  438,  467,  442,  446,
      689,  454,  442,   60,   61,  438,   61,  468,   61,  446,
       61,  442,  469,  467,  470,   61,   61,  687,  685,  473,
      468,  684,   61,  467,  682,  680,  487,  470,  469,  473,
       61,   61,   62,  678,   62,  487,   62,   62,  469,  663,
      480,  481,  480,  481,  504,  487,  481,  485,  662,  485,

       62,   63,  485,   63,  504,   63,   63,   63,  480,  481,
      489,  491,   63,   63,  489,  485,  480,  488,  660,   63,
      491,  659,  507,  489,  658,  657,  488,  655,   63,   65,
      491,   65,  507,  652,  488,   65,  490,   65,  492,  490,
       65,   65,  493,  490,  647,  492,  493,   65,  516,  645,
      515,  495,  490,  500,  492,  493,   65,   69,  644,   69,
      495,  516,  500,   69,  492,   69,  515,  642,   69,   69,
      495,  517,  500,  517,  545,   69,  515,  519,  545,  519,
      522,  525,  522,  525,   69,   70,  526,  545,  526,  517,
       70,   70,  534,  611,  534,  519,  599,   70,  522,  525,

      527,  537,  527,  537,  526,  527,   70,   72,  522,  525,
      534,   72,  526,  594,  554,  540,   72,   72,  527,  537,
      530,  543,  530,   72,  554,  530,  538,  537,  538,  529,
      543,  538,   72,   79,  541,  315,  541,   79,  530,  541,
      543,  281,   79,   79,  538,  546,  544,  276,  224,   79,
      221,  219,  541,  544,  546,  215,  202,  168,   79,   79,
       81,   81,  544,  161,  546,  548,   81,   81,  547,  548,
      160,  550,  544,   81,  557,  547,  557,  579,  548,  558,
      550,  558,   81,   87,  547,  151,  579,  147,   87,   87,
      550,  138,  557,  132,  547,   87,  579,  558,  560,  562,

      560,  562,  118,   87,   87,   89,  115,   92,   89,   89,
      565,   91,  565,   80,   89,   89,  560,  562,  563,   78,
      563,   89,   77,  563,  570,   75,  570,  562,  565,  570,
       89,   93,  572,   74,  572,   93,  563,  576,  565,  576,
       93,   93,  570,   71,   66,  580,  573,   93,  573,  574,
      572,  574,  580,   51,  574,  576,   93,   94,   28,   27,
      572,  580,   94,   94,  573,  576,  582,  574,  582,   94,
       23,  580,  573,  585,   22,  585,   17,  581,   94,   94,
      102,  581,    3,  102,  582,  102,  102,  583,    0,  583,
      581,  585,  102,    0,    0,  584,    0,  584,    0,  585,

      584,  102,  105,    0,    0,  583,  105,    0,  587,  105,
      587,  105,  105,  584,  586,  583,  586,    0,  105,  586,
      588,    0,  588,    0,    0,  588,  587,  105,  106,    0,
        0,  106,  586,  106,  106,  590,  587,  590,  588,    0,
      106,  595,  600,  595,  600,    0,  595,  600,    0,  106,
      106,  110,  110,  590,  602,  110,  602,  110,  110,  595,
      600,    0,    0,  590,  110,  603,  604,  603,  604,    0,
      603,    0,  602,  110,  111,    0,    0,  111,    0,  111,
      111,    0,  602,  603,  604,    0,  111,  606,  605,  606,
      605,    0,  604,  605,  111,  111,  113,  113,    0,  607,

      113,  607,  113,  113,    0,  606,  605,    0,    0,  113,
        0,    0,  615,    0,  615,  606,    0,  607,  113,  114,
        0,    0,  114,  114,    0,  607,  114,    0,  114,  114,
      615,    0,  608,    0,  608,  114,  612,  608,  612,    0,
      615,  612,    0,    0,  114,  117,  618,  117,  618,  117,
      608,  117,    0,  620,  612,  620,  117,  117,  620,    0,
      619,    0,  619,  117,  618,  621,    0,  621,    0,    0,
        0,  620,  117,  120,  618,  120,    0,  120,  619,  120,
        0,    0,    0,  621,  120,  120,  619,    0,    0,    0,
      622,  120,  622,  621,    0,  622,  624,  628,  624,  628,

      120,  121,    0,  121,    0,  121,    0,  121,  622,  631,
        0,  631,  121,  121,  624,  628,    0,    0,  632,  121,
      632,    0,    0,  632,  624,  628,    0,  631,  121,  121,
      123,    0,  123,    0,  123,    0,  632,  631,  633,  634,
      633,  634,    0,    0,  634,    0,    0,    0,  123,    0,
      636,  639,  636,  639,    0,    0,  633,  634,  123,  124,
        0,  124,  640,  124,  640,  124,  633,  640,  636,  639,
      124,  124,    0,    0,    0,    0,    0,  124,  636,  639,
      640,    0,    0,    0,    0,    0,  124,  124,  125,    0,
      125,    0,  125,  125,  125,    0,    0,    0,    0,  125,

      125,    0,    0,    0,    0,    0,  125,    0,    0,    0,
        0,    0,    0,    0,    0,  125,  126,    0,  126,    0,
      126,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  126,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  126,  128,    0,  128,    0,  128,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  128,    0,    0,    0,    0,    0,    0,
        0,  128,  129,    0,  129,    0,  129,  129,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      129,  130,    0,  130,    0,  130,  130,  130,    0,    0,

        0,    0,  130,  130,    0,    0,    0,    0,    0,  130,
        0,    0,    0,    0,    0,    0,    0,    0,  130,  133,
        0,  133,    0,  133,  133,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  133,  134,    0,
      134,    0,  134,  134,  134,    0,    0,    0,    0,  134,
      134,    0,    0,    0,    0,    0,  134,    0,    0,    0,
        0,    0,    0,    0,    0,  134,  140,    0,  140,    0,
      140,    0,  140,    0,    0,    0,    0,  140,  140,    0,
        0,    0,    0,    0,  140,    0,    0,    0,    0,    0,
        0,    0,    0,  140,  141,    0,  141,    0,  141,    0,

      141,    0,    0,    0,    0,  141,  141,    0,    0,    0,
        0,    0,  141,    0,    0,    0,    0,    0,    0,    0,
        0,  141,  141,  143,    0,  143,    0,  143,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  143,    0,    0,    0,    0,    0,    0,    0,  143,
      144,    0,  144,    0,  144,  144,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  144,  145,
        0,  145,    0,  145,  145,  145,    0,    0,    0,    0,
      145,  145,    0,    0,    0,    0,    0,  145,    0,    0,
        0,    0,    0,    0,    0,    0,  145,  148,    0,  148,

        0,  148,  148,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  148,  149,    0,  149,    0,
      149,  149,  149,    0,    0,    0,    0,  149,  149,    0,
        0,    0,    0,    0,  149,    0,    0,    0,    0,    0,
        0,    0,    0,  149,  154,    0,  154,    0,    0,    0,
      154,    0,  154,    0,    0,  154,  154,    0,    0,    0,
        0,    0,  154,    0,    0,    0,    0,    0,    0,    0,
        0,  154,  157,    0,  157,    0,    0,    0,  157,    0,
      157,    0,    0,  157,  157,    0,    0,    0,    0,    0,
      157,    0,    0,    0,    0,    0,    0,    0,    0,  157,

      158,    0,  158,    0,    0,    0,  158,    0,  158,    0,
        0,  158,  158,    0,    0,    0,    0,    0,  158,    0,
        0,    0,    0,    0,    0,    0,    0,  158,  162,    0,
        0,    0,  162,    0,    0,    0,    0,  162,  162,    0,
        0,    0,    0,    0,  162,    0,    0,    0,    0,    0,
        0,    0,    0,  162,  163,  163,    0,    0,    0,    0,
      163,  163,    0,    0,    0,    0,    0,  163,    0,    0,
        0,    0,    0,    0,    0,    0,  163,  164,  164,    0,
        0,    0,    0,  164,  164,    0,    0,    0,    0,    0,
      164,    0,    0,    0,    0,    0,    0,    0,    0,  164,

      169,    0,    0,    0,    0,  169,  169,    0,    0,    0,
        0,    0,  169,    0,    0,    0,    0,    0,    0,    0,
        0,  169,  169,  171,    0,    0,    0,  171,    0,    0,
        0,    0,  171,  171,    0,    0,    0,    0,    0,  171,
        0,    0,    0,    0,    0,    0,    0,    0,  171,  171,
      172,  172,    0,    0,    0,    0,  172,  172,    0,    0,
        0,    0,    0,  172,    0,    0,    0,    0,    0,    0,
        0,    0,  172,  175,    0,    0,    0,    0,  175,  175,
        0,    0,    0,    0,    0,  175,    0,    0,    0,    0,
        0,    0,    0,  175,  175,  177,    0,    0,  177,  177,

        0,    0,    0,    0,  177,  177,    0,    0,    0,    0,
        0,  177,    0,    0,    0,    0,    0,    0,    0,    0,
      177,  181,    0,    0,    0,    0,  181,  181,    0,    0,
        0,    0,    0,  181,    0,    0,    0,    0,    0,    0,
        0,    0,  181,  181,  183,    0,    0,    0,  183,    0,
        0,    0,    0,  183,  183,    0,    0,    0,    0,    0,
      183,    0,    0,    0,    0,    0,    0,    0,    0,  183,
      183,  184,  184,    0,    0,    0,    0,  184,  184,    0,
        0,    0,    0,    0,  184,    0,    0,    0,    0,    0,
        0,    0,    0,  184,  185,  185,    0,    0,    0,    0,

      185,  185,    0,    0,    0,    0,    0,  185,    0,  185,
        0,    0,    0,    0,    0,    0,  185,  188,    0,    0,
      188,    0,  188,  188,    0,    0,    0,    0,    0,  188,
        0,    0,    0,    0,    0,    0,    0,    0,  188,  190,
        0,    0,  190,    0,  190,  190,    0,    0,    0,    0,
        0,  190,    0,    0,    0,    0,    0,    0,    0,    0,
      190,  191,    0,    0,    0,  191,    0,    0,  191,    0,
      191,  191,    0,    0,    0,    0,    0,  191,    0,    0,
        0,    0,    0,    0,    0,    0,  191,  192,    0,    0,
      192,    0,  192,  192,    0,    0,    0,    0,    0,  192,

        0,    0,    0,    0,    0,    0,    0,    0,  192,  192,
      194,    0,    0,  194,    0,  194,  194,    0,    0,    0,
        0,    0,  194,    0,    0,    0,    0,    0,    0,    0,
        0,  194,  194,  195,    0,    0,    0,  195,    0,    0,
      195,    0,  195,  195,    0,    0,    0,    0,    0,  195,
        0,    0,    0,    0,    0,    0,    0,    0,  195,  195,
      196,  196,    0,    0,  196,    0,  196,  196,    0,    0,
        0,    0,    0,  196,    0,    0,    0,    0,    0,    0,
        0,    0,  196,  201,  201,    0,    0,  201,    0,  201,
      201,    0,    0,    0,    0,    0,  201,    0,    0,    0,

        0,    0,    0,    0,    0,  201,  204,  204,    0,    0,
      204,    0,  204,  204,    0,    0,    0,    0,    0,  204,
        0,    0,    0,    0,    0,    0,    0,    0,  204,  205,
        0,    0,  205,  205,    0,    0,  205,    0,  205,  205,
        0,    0,    0,    0,    0,  205,    0,    0,    0,    0,
        0,    0,    0,    0,  205,  209,    0,    0,    0,  209,
        0,    0,  209,    0,  209,  209,    0,    0,    0,    0,
        0,  209,    0,    0,    0,    0,    0,    0,    0,    0,
      209,  210,    0,    0,  210,    0,  210,  210,    0,    0,
        0,    0,    0,  210,    0,    0,    0,    0,    0,    0,

        0,    0,  210,  210,  218,    0,    0,  218,  218,    0,
        0,  218,    0,  218,  218,    0,    0,    0,    0,    0,
      218,    0,    0,    0,    0,    0,    0,    0,    0,  218,
      223,    0,  223,    0,  223,    0,  223,    0,    0,    0,
        0,  223,  223,    0,    0,    0,    0,    0,  223,    0,
        0,    0,    0,    0,    0,    0,    0,  223,  226,    0,
      226,    0,  226,    0,  226,    0,    0,    0,    0,  226,
      226,    0,    0,    0,    0,    0,  226,    0,    0,    0,
        0,    0,    0,    0,    0,  226,  228,    0,  228,    0,
      228,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,  228,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  228,  229,    0,  229,    0,  229,
      229,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  229,  230,    0,  230,    0,  230,    0,
      230,    0,    0,    0,    0,  230,  230,    0,    0,    0,
        0,    0,  230,    0,    0,    0,    0,    0,    0,    0,
        0,  230,  230,  232,    0,  232,    0,  232,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  232,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  232,  233,    0,  233,    0,  233,    0,  233,    0,

        0,    0,    0,  233,  233,    0,    0,    0,    0,    0,
      233,    0,    0,    0,    0,    0,    0,    0,    0,  233,
      233,  234,    0,  234,    0,  234,  234,  234,    0,    0,
        0,    0,  234,  234,    0,    0,    0,    0,    0,  234,
        0,    0,    0,    0,    0,    0,    0,    0,  234,  235,
        0,  235,    0,  235,  235,  235,    0,    0,    0,    0,
      235,  235,    0,    0,    0,    0,    0,  235,    0,    0,
        0,    0,    0,    0,    0,    0,  235,  237,    0,  237,
        0,  237,    0,  237,    0,    0,    0,    0,  237,  237,
        0,    0,    0,    0,    0,  237,    0,    0,    0,    0,

        0,    0,    0,  237,  237,  238,    0,  238,    0,  238,
      238,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  238,  239,    0,  239,    0,  239,  239,
      239,    0,    0,    0,    0,  239,  239,    0,    0,    0,
        0,    0,  239,    0,    0,    0,    0,    0,    0,    0,
        0,  239,  240,    0,  240,    0,  240,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      240,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      240,  242,    0,  242,    0,  242,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  242,

        0,    0,    0,    0,    0,    0,    0,  242,  243,    0,
      243,    0,  243,  243,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  243,  244,    0,  244,
        0,  244,    0,  244,    0,    0,    0,    0,  244,  244,
        0,    0,    0,    0,    0,  244,    0,    0,    0,    0,
        0,    0,    0,    0,  244,  244,  246,    0,  246,    0,
      246,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  246,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  246,  247,    0,  247,    0,  247,
        0,  247,    0,    0,    0,    0,  247,  247,    0,    0,

        0,    0,    0,  247,    0,    0,    0,    0,    0,    0,
        0,    0,  247,  247,  248,    0,  248,    0,  248,  248,
      248,    0,    0,    0,    0,  248,  248,    0,    0,    0,
        0,    0,  248,    0,    0,    0,    0,    0,    0,    0,
        0,  248,  252,    0,  252,    0,    0,    0,  252,    0,
      252,    0,    0,  252,  252,    0,    0,    0,    0,    0,
      252,    0,    0,    0,    0,    0,    0,    0,    0,  252,
      254,    0,  254,    0,    0,    0,  254,    0,  254,    0,
        0,  254,  254,    0,    0,    0,    0,    0,  254,    0,
        0,    0,    0,    0,    0,    0,    0,  254,  255,    0,

      255,    0,    0,    0,  255,    0,  255,    0,    0,  255,
      255,    0,    0,    0,    0,    0,  255,    0,    0,    0,
        0,    0,    0,    0,    0,  255,  263,    0,  263,    0,
        0,    0,  263,    0,  263,    0,    0,  263,  263,    0,
        0,    0,    0,    0,  263,    0,    0,    0,    0,    0,
        0,    0,    0,  263,  268,    0,    0,    0,    0,  268,
      268,    0,    0,    0,  268,    0,  268,    0,    0,    0,
        0,    0,    0,    0,    0,  268,  268,  273,    0,    0,
        0,  273,    0,    0,    0,    0,  273,  273,    0,    0,
        0,    0,    0,  273,    0,    0,    0,    0,    0,    0,

        0,    0,  273,  273,  274,  274,    0,    0,    0,    0,
      274,  274,    0,    0,    0,    0,    0,  274,    0,    0,
        0,    0,    0,    0,    0,    0,  274,  275,  275,    0,
        0,    0,    0,  275,  275,    0,    0,    0,    0,    0,
      275,    0,    0,    0,    0,    0,    0,    0,    0,  275,
      278,    0,    0,  278,  278,    0,    0,    0,    0,  278,
      278,    0,    0,    0,    0,    0,  278,    0,    0,    0,
        0,    0,    0,    0,    0,  278,  279,    0,    0,    0,
        0,  279,  279,    0,    0,    0,    0,    0,  279,    0,
        0,    0,    0,    0,    0,    0,    0,  279,  279,  283,

        0,    0,  283,  283,    0,    0,    0,    0,  283,  283,
        0,    0,    0,    0,    0,  283,    0,    0,    0,    0,
        0,    0,    0,    0,  283,  284,  284,    0,    0,    0,
        0,  284,  284,    0,    0,    0,    0,    0,  284,    0,
        0,  284,    0,    0,    0,    0,    0,  284,  289,    0,
        0,  289,    0,  289,  289,    0,    0,    0,    0,    0,
      289,    0,    0,    0,    0,    0,    0,    0,    0,  289,
      291,    0,    0,  291,    0,  291,  291,    0,    0,    0,
        0,    0,  291,    0,    0,    0,    0,    0,    0,    0,
        0,  291,  292,    0,    0,    0,  292,    0,    0,  292,

        0,  292,  292,    0,    0,    0,    0,    0,  292,    0,
        0,    0,    0,    0,    0,    0,    0,  292,  296,    0,
        0,  296,    0,  296,  296,    0,    0,    0,    0,    0,
      296,    0,    0,    0,    0,    0,    0,    0,    0,  296,
      296,  298,    0,    0,  298,    0,  298,  298,    0,    0,
        0,    0,    0,  298,    0,    0,    0,    0,    0,    0,
        0,    0,  298,  298,  299,    0,    0,    0,  299,    0,
        0,  299,    0,  299,  299,    0,    0,    0,    0,    0,
      299,    0,    0,    0,    0,    0,    0,    0,    0,  299,
      299,  300,  300,    0,    0,  300,    0,  300,  300,    0,

        0,    0,    0,    0,  300,    0,    0,    0,    0,    0,
        0,    0,    0,  300,  301,  301,    0,    0,  301,    0,
      301,  301,    0,    0,    0,    0,    0,  301,    0,    0,
        0,    0,    0,    0,    0,    0,  301,  302,    0,    0,
      302,    0,  302,  302,    0,    0,    0,    0,    0,  302,
        0,    0,    0,    0,    0,    0,    0,  302,  302,  304,
      304,    0,    0,  304,    0,  304,  304,    0,    0,    0,
        0,    0,  304,    0,    0,    0,    0,    0,    0,    0,
        0,  304,  305,    0,    0,  305,  305,    0,    0,  305,
        0,  305,  305,    0,    0,    0,    0,    0,  305,    0,

        0,    0,    0,    0,    0,    0,    0,  305,  313,    0,
        0,    0,  313,    0,    0,  313,    0,  313,  313,    0,
        0,    0,    0,    0,  313,    0,    0,    0,    0,    0,
        0,    0,    0,  313,  313,  314,  314,    0,    0,  314,
        0,  314,  314,    0,    0,    0,    0,    0,  314,    0,
        0,    0,    0,    0,    0,    0,    0,  314,  318,    0,
      318,    0,  318,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  318,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  318,  319,    0,  319,
        0,  319,  319,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  319,  321,    0,  321,    0,
      321,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  321,    0,    0,    0,    0,    0,
        0,    0,  321,  322,    0,  322,    0,  322,  322,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  322,  324,    0,  324,    0,  324,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      324,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      324,  325,    0,  325,    0,  325,  325,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  325,

      326,    0,  326,    0,  326,    0,  326,    0,    0,    0,
        0,  326,  326,    0,    0,    0,    0,    0,  326,    0,
        0,    0,    0,    0,    0,    0,    0,  326,  326,  328,
        0,  328,    0,  328,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  328,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  328,  329,    0,
      329,    0,  329,    0,  329,    0,    0,    0,    0,  329,
      329,    0,    0,    0,    0,    0,  329,    0,    0,    0,
        0,    0,    0,    0,    0,  329,  329,  330,    0,  330,
        0,  330,  330,  330,    0,    0,    0,    0,  330,  330,

        0,    0,    0,    0,    0,  330,    0,    0,    0,    0,
        0,    0,    0,    0,  330,  331,    0,  331,    0,  331,
      331,  331,    0,    0,    0,    0,  331,  331,    0,    0,
        0,    0,    0,  331,    0,    0,    0,    0,    0,    0,
        0,    0,  331,  333,    0,  333,    0,  333,    0,  333,
        0,    0,    0,    0,  333,  333,    0,    0,    0,    0,
        0,  333,    0,    0,    0,    0,    0,    0,    0,  333,
      333,  334,    0,  334,    0,  334,  334,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  334,
      335,    0,  335,    0,  335,  335,  335,    0,    0,    0,

        0,  335,  335,    0,    0,    0,    0,    0,  335,    0,
        0,    0,    0,    0,    0,    0,    0,  335,  336,    0,
      336,    0,  336,    0,  336,    0,    0,    0,    0,  336,
      336,    0,    0,    0,    0,    0,  336,    0,    0,    0,
        0,    0,    0,    0,    0,  336,  336,  339,    0,  339,
        0,  339,    0,  339,    0,    0,    0,    0,  339,  339,
        0,    0,    0,    0,    0,  339,    0,    0,    0,    0,
        0,    0,    0,  339,  339,  340,    0,  340,    0,  340,
      340,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  340,  341,    0,  341,    0,  341,  341,

      341,    0,    0,    0,    0,  341,  341,    0,    0,    0,
        0,    0,  341,    0,    0,    0,    0,    0,    0,    0,
        0,  341,  351,    0,    0,    0,    0,  351,  351,    0,
        0,    0,  351,    0,  351,    0,    0,    0,    0,    0,
        0,    0,    0,  351,  351,  352,    0,    0,    0,    0,
      352,  352,    0,    0,    0,    0,    0,  352,    0,    0,
        0,    0,    0,    0,    0,    0,  352,  352,  354,    0,
        0,    0,    0,  354,  354,    0,    0,    0,    0,    0,
      354,    0,    0,    0,    0,    0,    0,    0,  354,  354,
      356,    0,    0,  356,  356,    0,    0,    0,    0,  356,

      356,    0,    0,    0,    0,    0,  356,    0,    0,    0,
        0,    0,    0,    0,    0,  356,  357,    0,    0,    0,
        0,  357,  357,    0,    0,    0,    0,    0,  357,    0,
        0,    0,    0,    0,    0,    0,    0,  357,  357,  359,
        0,    0,    0,  359,    0,    0,    0,    0,  359,  359,
        0,    0,    0,    0,    0,  359,    0,    0,    0,    0,
        0,    0,    0,    0,  359,  359,  360,  360,    0,    0,
        0,    0,  360,  360,    0,    0,    0,    0,    0,  360,
        0,    0,    0,    0,    0,    0,    0,    0,  360,  361,
        0,  361,    0,    0,  361,  361,    0,    0,    0,    0,

      361,  361,    0,    0,    0,    0,    0,  361,    0,    0,
        0,    0,    0,    0,    0,    0,  361,  379,    0,    0,
      379,    0,  379,  379,    0,    0,    0,    0,    0,  379,
        0,    0,    0,    0,    0,    0,    0,  379,  379,  382,
        0,    0,  382,  382,    0,    0,  382,    0,  382,  382,
        0,    0,    0,    0,    0,  382,    0,    0,    0,    0,
        0,    0,    0,    0,  382,  383,    0,    0,  383,    0,
      383,  383,    0,    0,    0,    0,    0,  383,    0,    0,
        0,    0,    0,    0,    0,    0,  383,  383,  385,    0,
        0,  385,    0,  385,  385,    0,    0,    0,    0,    0,

      385,    0,    0,    0,    0,    0,    0,    0,  385,  385,
      388,    0,    0,  388,  388,    0,    0,  388,    0,  388,
      388,    0,    0,    0,    0,    0,  388,    0,    0,    0,
        0,    0,    0,    0,    0,  388,  390,    0,  390,    0,
      390,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  390,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  390,  391,    0,  391,    0,  391,
      391,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  391,  393,    0,  393,    0,  393,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  393,    0,    0,    0,    0,    0,    0,    0,
      393,  394,    0,  394,    0,  394,  394,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  394,
      395,    0,  395,    0,  395,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  395,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  395,  397,
        0,  397,    0,  397,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  397,    0,    0,
        0,    0,    0,    0,    0,  397,  398,    0,  398,    0,
      398,  398,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,  398,  399,    0,  399,    0,  399,
        0,  399,    0,    0,    0,    0,  399,  399,    0,    0,
        0,    0,    0,  399,    0,    0,    0,    0,    0,    0,
        0,    0,  399,  399,  403,    0,  403,    0,  403,  403,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  403,  405,    0,  405,    0,  405,    0,  405,
        0,    0,    0,    0,  405,  405,    0,    0,    0,    0,
        0,  405,    0,    0,    0,    0,    0,    0,    0,    0,
      405,  405,  406,    0,    0,    0,    0,  406,  406,    0,
        0,    0,    0,    0,  406,    0,    0,    0,    0,    0,

        0,    0,    0,  406,  406,  407,    0,  407,    0,  407,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  407,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  407,  408,    0,  408,    0,  408,    0,
      408,    0,    0,    0,    0,  408,  408,    0,    0,    0,
        0,    0,  408,    0,    0,    0,    0,    0,    0,    0,
        0,  408,  408,  409,    0,  409,    0,  409,  409,  409,
        0,    0,    0,    0,  409,  409,    0,    0,    0,    0,
        0,  409,    0,    0,    0,    0,    0,    0,    0,    0,
      409,  415,    0,    0,    0,    0,  415,  415,    0,    0,

        0,    0,    0,  415,    0,    0,    0,    0,    0,    0,
        0,    0,  415,  415,  416,    0,    0,    0,    0,  416,
      416,    0,    0,    0,    0,    0,  416,    0,    0,    0,
        0,    0,    0,    0,    0,  416,  416,  418,    0,    0,
        0,  418,    0,    0,    0,    0,  418,  418,    0,    0,
        0,    0,    0,  418,    0,    0,    0,    0,    0,    0,
        0,    0,  418,  418,  422,    0,    0,    0,  422,    0,
        0,    0,    0,  422,  422,    0,    0,    0,    0,    0,
      422,    0,    0,    0,    0,    0,    0,    0,    0,  422,
      422,  424,    0,  424,    0,    0,  424,  424,    0,    0,

        0,    0,  424,  424,    0,    0,    0,    0,    0,  424,
        0,    0,    0,    0,    0,    0,    0,    0,  424,  426,
        0,  426,    0,    0,    0,  426,    0,    0,    0,    0,
      426,  426,    0,    0,    0,    0,    0,  426,    0,    0,
        0,    0,    0,    0,    0,  426,  426,  428,    0,  428,
        0,    0,  428,  428,    0,    0,    0,    0,  428,  428,
        0,    0,    0,    0,    0,  428,    0,    0,    0,    0,
        0,    0,    0,    0,  428,  439,    0,    0,  439,    0,
      439,  439,    0,    0,    0,    0,    0,  439,    0,    0,
        0,    0,    0,    0,    0,    0,  439,  439,  445,    0,

        0,  445,    0,  445,  445,    0,    0,    0,    0,    0,
      445,    0,    0,    0,    0,    0,    0,    0,    0,  445,
      445,  448,    0,    0,    0,  448,    0,    0,  448,    0,
      448,  448,    0,    0,    0,    0,    0,  448,    0,    0,
        0,    0,    0,    0,    0,    0,  448,  448,  449,  449,
        0,    0,  449,    0,  449,  449,    0,    0,    0,    0,
        0,  449,    0,    0,    0,    0,    0,    0,    0,    0,
      449,  450,    0,  450,    0,  450,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  450,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  450,

      452,    0,  452,    0,  452,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  452,    0,
        0,    0,    0,    0,    0,    0,  452,  453,    0,  453,
        0,  453,  453,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  453,  455,    0,  455,    0,
      455,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  455,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  455,  456,    0,  456,    0,  456,
      456,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  456,  457,    0,  457,    0,  457,    0,

      457,    0,    0,    0,    0,  457,  457,    0,    0,    0,
        0,    0,  457,    0,    0,    0,    0,    0,    0,    0,
        0,  457,  457,  459,    0,  459,    0,  459,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  459,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  459,  460,    0,  460,    0,  460,    0,  460,    0,
        0,    0,    0,  460,  460,    0,    0,    0,    0,    0,
      460,    0,    0,    0,    0,    0,    0,    0,    0,  460,
      460,  461,    0,  461,    0,  461,  461,  461,    0,    0,
        0,    0,  461,  461,    0,    0,    0,    0,    0,  461,

        0,    0,    0,    0,    0,    0,    0,    0,  461,  462,
        0,  462,    0,  462,    0,  462,    0,    0,    0,    0,
      462,  462,    0,    0,    0,    0,    0,  462,    0,    0,
        0,    0,    0,    0,    0,    0,  462,  462,  464,    0,
      464,    0,  464,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  464,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  464,  465,    0,  465,
        0,  465,    0,  465,    0,    0,    0,    0,  465,  465,
        0,    0,    0,    0,    0,  465,    0,    0,    0,    0,
        0,    0,    0,    0,  465,  465,  466,    0,  466,    0,

      466,  466,  466,    0,    0,    0,    0,  466,  466,    0,
        0,    0,    0,    0,  466,    0,    0,    0,    0,    0,
        0,    0,    0,  466,  471,  471,    0,    0,    0,    0,
      471,  471,    0,    0,    0,    0,    0,  471,    0,    0,
        0,    0,    0,    0,    0,    0,  471,  476,    0,  476,
        0,    0,    0,  476,    0,    0,    0,    0,  476,  476,
        0,    0,    0,    0,    0,  476,    0,    0,    0,    0,
        0,    0,    0,    0,  476,  478,    0,  478,    0,    0,
        0,  478,    0,    0,    0,    0,  478,  478,    0,    0,
        0,    0,    0,  478,    0,    0,    0,    0,    0,    0,

        0,    0,  478,  479,    0,  479,    0,    0,    0,  479,
        0,    0,    0,    0,  479,  479,    0,    0,    0,    0,
        0,  479,    0,    0,    0,    0,    0,    0,    0,    0,
      479,  479,  482,    0,  482,    0,    0,  482,  482,    0,
        0,    0,    0,  482,  482,    0,    0,    0,    0,    0,
      482,    0,    0,    0,    0,    0,    0,    0,    0,  482,
      484,    0,  484,    0,    0,    0,  484,    0,    0,    0,
        0,  484,  484,    0,    0,    0,    0,    0,  484,    0,
        0,    0,    0,    0,    0,    0,  484,  484,  486,    0,
      486,    0,    0,  486,  486,    0,    0,    0,    0,  486,

      486,    0,    0,    0,    0,    0,  486,    0,    0,    0,
        0,    0,    0,    0,    0,  486,  494,    0,    0,  494,
        0,  494,  494,    0,    0,    0,    0,    0,  494,    0,
        0,    0,    0,    0,    0,    0,    0,  494,  494,  497,
        0,    0,    0,  497,    0,    0,  497,    0,  497,  497,
        0,    0,    0,    0,    0,  497,    0,    0,    0,    0,
        0,    0,    0,    0,  497,  497,  502,    0,    0,    0,
      502,    0,    0,  502,    0,  502,  502,    0,    0,    0,
        0,    0,  502,    0,    0,    0,    0,    0,    0,    0,
        0,  502,  502,  505,    0,  505,    0,  505,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  505,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  505,  506,    0,  506,    0,  506,  506,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      506,  508,    0,  508,    0,  508,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  508,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  508,
      509,    0,  509,    0,  509,  509,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  509,  512,
        0,  512,    0,  512,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  512,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  512,  518,    0,
      518,    0,    0,    0,  518,    0,    0,    0,    0,  518,
      518,    0,    0,    0,    0,    0,  518,    0,    0,    0,
        0,    0,    0,    0,    0,  518,  520,    0,  520,    0,
        0,    0,  520,    0,    0,    0,    0,  520,  520,    0,
        0,    0,    0,    0,  520,    0,    0,    0,    0,    0,
        0,    0,    0,  520,  521,    0,  521,    0,    0,    0,
      521,    0,    0,    0,    0,  521,  521,    0,    0,    0,
        0,    0,  521,    0,    0,    0,    0,    0,    0,    0,

        0,  521,  521,  523,    0,  523,    0,    0,    0,  523,
        0,    0,    0,    0,  523,  523,    0,    0,    0,    0,
        0,  523,    0,    0,    0,    0,    0,    0,    0,    0,
      523,  523,  524,    0,  524,    0,    0,  524,  524,    0,
        0,    0,    0,  524,  524,    0,    0,    0,    0,    0,
      524,    0,    0,    0,    0,    0,    0,    0,    0,  524,
      528,    0,  528,    0,    0,  528,  528,    0,    0,    0,
        0,  528,  528,    0,    0,    0,    0,    0,  528,    0,
        0,    0,    0,    0,    0,    0,    0,  528,  531,    0,
      531,    0,    0,  531,  531,    0,    0,    0,    0,  531,

      531,    0,    0,    0,    0,    0,  531,    0,    0,    0,
        0,    0,    0,    0,    0,  531,  535,    0,  535,    0,
        0,    0,  535,    0,    0,    0,    0,  535,  535,    0,
        0,    0,    0,    0,  535,    0,    0,    0,    0,    0,
        0,    0,    0,  535,  536,    0,  536,    0,    0,    0,
      536,    0,    0,    0,    0,  536,  536,    0,    0,    0,
        0,    0,  536,    0,    0,    0,    0,    0,    0,    0,
        0,  536,  536,  555,    0,  555,    0,  555,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  555,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  555,  556,    0,  556,    0,  556,  556,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      556,  564,    0,  564,    0,    0,    0,  564,    0,    0,
        0,    0,  564,  564,    0,    0,    0,    0,    0,  564,
        0,    0,    0,    0,    0,    0,    0,    0,  564,  564,
      566,    0,  566,    0,    0,    0,  566,    0,    0,    0,
        0,  566,  566,    0,    0,    0,    0,    0,  566,    0,
        0,    0,    0,    0,    0,    0,    0,  566,  566,  567,
        0,  567,    0,    0,  567,  567,    0,    0,    0,    0,
      567,  567,    0,    0,    0,    0,    0,  567,    0,    0,

        0,    0,    0,    0,    0,    0,  567,  568,    0,  568,
        0,    0,  568,  568,    0,    0,    0,    0,  568,  568,
        0,    0,    0,    0,    0,  568,    0,    0,    0,    0,
        0,    0,    0,    0,  568,  569,    0,  569,    0,    0,
        0,  569,    0,    0,    0,    0,  569,  569,    0,    0,
        0,    0,    0,  569,    0,    0,    0,    0,    0,    0,
        0,  569,  569,  571,    0,  571,    0,    0,  571,  571,
        0,    0,    0,    0,  571,  571,    0,    0,    0,    0,
        0,  571,    0,    0,    0,    0,    0,    0,    0,    0,
      571,  577,    0,  577,    0,    0,    0,  577,    0,    0,

        0,    0,  577,  577,    0,    0,    0,    0,    0,  577,
        0,    0,    0,    0,    0,    0,    0,    0,  577,  577,
      578,    0,  578,    0,    0,  578,  578,    0,    0,    0,
        0,  578,  578,    0,    0,    0,    0,    0,  578,    0,
        0,    0,    0,    0,    0,    0,    0,  578,  596,    0,
      596,    0,    0,  596,  596,    0,    0,    0,    0,  596,
      596,    0,    0,    0,    0,    0,  596,    0,    0,    0,
        0,    0,    0,    0,    0,  596,  597,    0,  597,    0,
        0,    0,  597,    0,    0,    0,    0,  597,  597,    0,
        0,    0,    0,    0,  597,    0,    0,    0,    0,    0,

        0,    0,    0,  597,  597,  601,    0,  601,    0,    0,
      601,  601,    0,    0,    0,    0,  601,  601,    0,    0,
        0,    0,    0,  601,    0,    0,    0,    0,    0,    0,
        0,    0,  601,  609,    0,  609,    0,    0,    0,  609,
        0,    0,    0,    0,  609,  609,    0,    0,    0,    0,
        0,  609,    0,    0,    0,    0,    0,    0,    0,    0,
      609,  609,  614,    0,  614,    0,    0,    0,  614,    0,
        0,    0,    0,  614,  614,    0,    0,    0,    0,    0,
      614,    0,    0,    0,    0,    0,    0,    0,    0,  614,
      614,  616,    0,  616,    0,    0,    0,  616,    0,    0,

        0,    0,  616,  616,    0,    0,    0,    0,    0,  616,
        0,    0,    0,    0,    0,    0,    0,    0,  616,  616,
      623,    0,  623,    0,    0,    0,  623,    0,    0,    0,
        0,  623,  623,    0,    0,    0,    0,    0,  623,    0,
        0,    0,    0,    0,    0,    0,    0,  623,  623,  625,
        0,  625,    0,    0,    0,  625,    0,    0,    0,    0,
      625,  625,    0,    0,    0,    0,    0,  625,    0,    0,
        0,    0,    0,    0,    0,    0,  625,  625,  629,    0,
      629,    0,    0,    0,  629,    0,    0,    0,    0,  629,
      629,    0,    0,    0,    0,    0,  629,    0,    0,    0,

        0,    0,    0,    0,    0,  629,  629,  643,  643,    0,
      643,  646,    0,    0,  646,  648,  648,    0,  648,  649,
      649,    0,  649,  650,  650,    0,  650,  651,  651,    0,
      651,  653,  653,    0,  653,  654,    0,    0,  654,  656,
        0,    0,  656,  661,    0,    0,  661,  664,    0,    0,
      664,  665,  665,    0,  665,  666,  666,    0,  666,  667,
      667,    0,  667,  668,  668,    0,  668,  669,  669,    0,
      669,  670,  670,    0,  670,  671,  671,    0,  671,  672,
      672,    0,  672,  673,  673,    0,  673,  674,    0,    0,
      674,  675,  675,    0,  675,  676,  676,    0,  676,  677,

      677,    0,  677,  679,    0,    0,  679,  681,    0,    0,
      681,  683,    0,    0,  683,  686,    0,    0,  686,  688,
        0,    0,  688,  692,    0,    0,  692,  694,  694,    0,
      694,  695,  695,    0,  695,  696,  696,    0,  696,  697,
      697,    0,  697,  698,  698,    0,  698,  699,  699,    0,
      699,  700,  700,    0,  700,  701,  701,    0,  701,  702,
      702,    0,  702,  703,  703,    0,  703,  704,  704,    0,
      704,  705,  705,    0,  705,  706,  706,    0,  706,  707,
        0,    0,  707,  708,  708,    0,  708,  709,  709,    0,
      709,  710,  710,    0,  710,  711,  711,    0,  711,  712,

      712,    0,  712,  713,  713,    0,  713,  714,  714,    0,
      714,  715,    0,    0,  715,  717,    0,    0,  717,  721,
        0,    0,  721,  724,    0,    0,  724,  725,    0,    0,
      725,  728,    0,    0,  728,  731,    0,    0,  731,  734,
        0,    0,  734,  737,    0,    0,  737,  739,    0,    0,
      739,  741,  741,    0,  741,  742,  742,    0,  742,  743,
      743,    0,  743,  744,  744,    0,  744,  746,  746,    0,
      746,  747,  747,    0,  747,  748,  748,    0,  748,  749,
      749,    0,  749,  750,  750,    0,  750,  751,  751,    0,
      751,  752,  752,    0,  752,  753,  753,    0,  753,  754,

      754,    0,  754,  756,  756,    0,  756,  757,    0,    0,
      757,  758,  758,    0,  758,  759,  759,    0,  759,  760,
      760,    0,  760,  761,  761,    0,  761,  762,  762,    0,
      762,  763,    0,    0,  763,  766,    0,    0,  766,  769,
        0,    0,  769,  771,    0,    0,  771,  775,    0,    0,
      775,  777,    0,    0,  777,  779,    0,    0,  779,  783,
        0,    0,  783,  787,    0,    0,  787,  789,    0,    0,
      789,  791,  791,    0,  791,  792,  792,    0,  792,  793,
      793,    0,  793,  795,  795,    0,  795,  796,  796,    0,
      796,  797,  797,    0,  797,  798,  798,    0,  798,  799,

      799,    0,  799,  800,  800,    0,  800,  801,  801,    0,
      801,  802,  802,    0,  802,  803,  803,    0,  803,  804,
      804,    0,  804,  805,  805,    0,  805,  806,    0,    0,
      806,  807,    0,    0,  807,  812,    0,    0,  812,  814,
        0,    0,  814,  816,  816,    0,  816,  817,    0,    0,
      817,  818,    0,    0,  818,  822,    0,    0,  822,  824,
        0,    0,  824,  826,  826,    0,  826,  827,  827,    0,
      827,  828,  828,    0,  828,  829,  829,    0,  829,  830,
      830,    0,  830,  831,  831,    0,  831,  833,    0,    0,
      833,  835,    0,    0,  835,  836,  836,    0,  836,  837,

      837,    0,  837,  838,  838,    0,  838,  839,  839,    0,
      839,  841,    0,    0,  841,  844,    0,    0,  844,  846,
      846,    0,  846,  848,  848,    0,  848,  849,  849,    0,
      849,  850,  850,    0,  850,  851,  851,    0,  851,  852,
      852,    0,  852,  853,    0,    0,  853,  855,  855,    0,
      855,  856,  856,    0,  856,  857,  857,    0,  857,  858,
      858,    0,  858,  859,  859,    0,  859,  860,  860,    0,
      860,  861,  861,    0,  861,  862,  862,    0,  862,  863,
      863,    0,  863,  865,    0,    0,  865,  867,    0,    0,
      867,  868,  868,    0,  868,  869,  869,    0,  869,  870,

      870,    0,  870,  871,  871,    0,  871,  872,  872,    0,
      872,  873,  873,    0,  873,  874,  874,    0,  874,  875,
      875,    0,  875,  876,  876,    0,  876,  877,  877,    0,
      877,  878,    0,    0,  878,  879,  879,    0,  879,  880,
      880,    0,  880,  881,  881,    0,  881,  882,  882,    0,
      882,  883,  883,    0,  883,  884,  884,    0,  884,  885,
      885,    0,  885,  886,  886,    0,  886,  887,  887,    0,
      887,  888,  888,    0,  888,  889,  889,    0,  889,  890,
      890,    0,  890,  891,  891,    0,  891,  892,  892,    0,
      892,  893,  893,    0,  893,  894,  894,    0,  894,  895,

      895,    0,  895,  896,  896,    0,  896,  897,  897,    0,
      897,  898,  898,    0,  898,  899,  899,    0,  899,  900,
      900,    0,  900,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  641,  641,  641,  641,  641,  641,
      641,  641,  641,  641,  641
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[24] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#ifndef YYLMAX
#define YYLMAX 8192
#endif

char yytext[YYLMAX];
char *yytext_ptr;
#line 1 "shell.l"
/*
 *
 * CS-252 sh 
 * shell.l: lexical analyzer for shell
 * You have to extend it.
 *
 */
#line 11 "shell.l"
#include <pwd.h>
#include <cstring>
#include<algorithm>
#include "y.tab.hh"
#include "shell.hh"
#include <unistd.h>

extern "C" char * read_line();

int mygetc(FILE * f) {
  static char *p;
  char c;

  if (!isatty(0)) {
    return getc(f);
  }

  if (!p || *p == 0) {
    char * s = read_line();
    p = s;
  }

  c = *p;
  p++;

  return c;
}

#undef getc
#define getc(f) mygetc(f)

static void yyunput (int c,char *buf_ptr);

void myunputc(int c) {
  unput(c);
}

#line 2381 "lex.yy.cc"
#line 2382 "lex.yy.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 52 "shell.l"


#line 2602 "lex.yy.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 642 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 7224 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 54 "shell.l"
{
  return NEWLINE;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 58 "shell.l"
{
  /* Discard spaces and tabs */
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 62 "shell.l"
{
  return GREAT;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 66 "shell.l"
{
  return LESS;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 70 "shell.l"
{
  return GREATGREAT;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 74 "shell.l"
{
  return GREATAMPERSAND;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 78 "shell.l"
{
  return GREATGREATAMPERSAND;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 82 "shell.l"
{
  return TWOGREAT;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 86 "shell.l"
{
  return PIPE;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 90 "shell.l"
{
  return AMPERSAND;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 94 "shell.l"
{
  std::string * text = new std::string(yytext);
  std::size_t end = text->find("/");
  if (text->length() == 1) {
    yylval.cpp_string = new std::string(getenv("HOME"));  
  } else if (end != std::string::npos) {
    std::string user = text->substr(1, end - 1);
    * text = getpwnam(user.c_str())->pw_dir + text->substr(end, text->length() - end + 1);
    yylval.cpp_string = new std::string(*text);
  } else {
    std::string user = text->substr(1, text->length() - 1);
    yylval.cpp_string = new std::string(getpwnam(user.c_str())->pw_dir);
  }
  return WORD;
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 109 "shell.l"
{
  std::string var = std::to_string(getpid());
  yylval.cpp_string = new std::string(var);
  return WORD;
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 115 "shell.l"
{
  std::string var = std::to_string(Shell::return_code);
  yylval.cpp_string = new std::string(var);
  return WORD;
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 121 "shell.l"
{
  std::string var = std::to_string(Shell::last_pid);
  yylval.cpp_string = new std::string(var);
  return WORD;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 126 "shell.l"
{
  yylval.cpp_string = new std::string(Shell::last_arg);
  return WORD;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 130 "shell.l"
{
  yylval.cpp_string = new std::string(Shell::path);
  return WORD;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 135 "shell.l"
{
  std::string * text = new std::string(yytext);
  std::size_t start = text->find("${");
  std::size_t end = text->find("}");
  while (start != std::string::npos) {
    char * var = getenv(text->substr(start + 2, end - start - 2).c_str());
    * text = text->substr(0, start) + var + text->substr(end + 1, text->length() - end - 1);
    start = text->find("${");
    end = text->find("}");
  }
  yylval.cpp_string = new std::string(*text);
  return WORD;
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 150 "shell.l"
{
  std::string * text = new std::string(yytext);
  std::string com = text->substr(2, text->length() - 3);

  int tmpin = dup(0);
  int tmpout = dup(1);
  int pin[2];
  int pout[2];
  pipe(pin);
  pipe(pout);
  dup2(pin[0], 0);
  close(pin[0]);
  dup2(pout[1], 1);
  close(pout[1]);

  write(pin[1], com.c_str(), com.size());
  write(pin[1], "\n",  1);
  write(pin[1], "exit\n", 5);

  close(pin[1]);

  int ret = fork();
  if (ret == 0) {
    execvp("/proc/self/exe", NULL);
    perror("execvp");
    _exit(1);
  } else if (ret < 0) { 
    perror("fork");
    exit(0);
  }
  dup2(tmpin, 0);
  dup2(tmpout, 1);
  close(tmpout);
  close(tmpin);

  char c;
  std::string buff = "";
  while (read(pout[0], &c, 1)) {
    // printf("char:%c\n", c);
    if (c == '\n') {
      buff.push_back(' ');
    } else {
      buff.push_back(c);
    }
  }
  close(pout[0]);
  unput('\0');
  for (int i = buff.length() - 7; i >= 0; i--) {
    unput(buff.c_str()[i]);
  }
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 202 "shell.l"
{
  std::string * text = new std::string(yytext);
  std::string path = text->substr(7, text->length() - 7);
  FILE* f = fopen(path.c_str(), "r");
  
  if (!f) {
    perror("file");
    if (isatty(0)) {
      Shell::prompt();
    }
  } else {
    Shell::_currentCommand._source = true;
    yypush_buffer_state(yy_create_buffer(f, YY_BUF_SIZE));
    yyparse();
    yypop_buffer_state();
    fclose(f);
    Shell::_currentCommand._source = false;
    if (isatty(0)) {
      Shell::prompt();
    }
  }
} 
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 226 "shell.l"
{
  std::string * text = new std::string(yytext);
  yylval.cpp_string = new std::string(text->substr(1, text->length() - 2));
  return WORD;
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 232 "shell.l"
{
  std::string * text = new std::string(yytext);
  std::string t = "";
  for (int i = 0; i < text->length(); i++) {
    if (text->c_str()[i] == '\\') {
      t.push_back(text->c_str()[i + 1]);
      i++;
    } else {
      t.push_back(text->c_str()[i]);
    }
  }
  // printf("Before:%s, After:%s\n", text->c_str(), t.c_str());
  yylval.cpp_string = new std::string(t);
  return WORD;
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 248 "shell.l"
{
  /* Assume that file names have only alpha chars */
  yylval.cpp_string = new std::string(yytext);
  return WORD;
  
}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 256 "shell.l"
ECHO;
	YY_BREAK
#line 2943 "lex.yy.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 642 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 642 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 641);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 256 "shell.l"
